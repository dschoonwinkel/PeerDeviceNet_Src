android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    java.util.HashMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.i:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.j:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    java.util.HashMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.k:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.l:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.m:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.n:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.o:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.p:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.r:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.s:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.u:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.v:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.w:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.x:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.y:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.z:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.aa:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ab:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void gc() -> c
    int size() -> a
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> b
    int idealByteArraySize(int) -> c
    int idealIntArraySize(int) -> d
android.support.v4.view.KeyEventCompat -> android.support.v4.view.a:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.b:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.c:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.d:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.e:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.MotionEventCompat -> android.support.v4.view.f:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.g:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.h:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.i:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.j:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> android.support.v4.view.k:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.l:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.m:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.n:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.o:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.p:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> android.support.v4.view.q:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.r:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.s:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.t:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.u:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.v:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.w:
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.x:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.y:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.z:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.aa:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ab:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    java.util.Comparator COMPARATOR -> b
    android.view.animation.Interpolator sInterpolator -> c
    java.util.ArrayList mItems -> d
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> e
    android.graphics.Rect mTempRect -> f
    android.support.v4.view.PagerAdapter mAdapter -> g
    int mCurItem -> h
    int mRestoredCurItem -> i
    android.os.Parcelable mRestoredAdapterState -> j
    java.lang.ClassLoader mRestoredClassLoader -> k
    android.widget.Scroller mScroller -> l
    android.support.v4.view.ViewPager$PagerObserver mObserver -> m
    int mPageMargin -> n
    android.graphics.drawable.Drawable mMarginDrawable -> o
    int mTopPageBounds -> p
    int mBottomPageBounds -> q
    float mFirstOffset -> r
    float mLastOffset -> s
    int mChildWidthMeasureSpec -> t
    int mChildHeightMeasureSpec -> u
    boolean mInLayout -> v
    boolean mScrollingCacheEnabled -> w
    boolean mPopulatePending -> x
    int mOffscreenPageLimit -> y
    boolean mIsBeingDragged -> z
    boolean mIsUnableToDrag -> A
    int mDefaultGutterSize -> B
    int mGutterSize -> C
    int mTouchSlop -> D
    float mInitialMotionX -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    int mActivePointerId -> H
    android.view.VelocityTracker mVelocityTracker -> I
    int mMinimumVelocity -> J
    int mMaximumVelocity -> K
    int mFlingDistance -> L
    int mCloseEnough -> M
    int mSeenPositionMin -> N
    int mSeenPositionMax -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> g
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> h
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.ac:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.ad:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ae:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.af:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ag:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ah:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.ai:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.aj:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.ak:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.al:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.am:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.d.a:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.d.b:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.d.c:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.d.d:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.d.e:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
com.google.zxing.BarcodeFormat -> com.google.zxing.a:
    com.google.zxing.BarcodeFormat AZTEC -> a
    com.google.zxing.BarcodeFormat CODABAR -> b
    com.google.zxing.BarcodeFormat CODE_39 -> c
    com.google.zxing.BarcodeFormat CODE_93 -> d
    com.google.zxing.BarcodeFormat CODE_128 -> e
    com.google.zxing.BarcodeFormat DATA_MATRIX -> f
    com.google.zxing.BarcodeFormat EAN_8 -> g
    com.google.zxing.BarcodeFormat EAN_13 -> h
    com.google.zxing.BarcodeFormat ITF -> i
    com.google.zxing.BarcodeFormat MAXICODE -> j
    com.google.zxing.BarcodeFormat PDF_417 -> k
    com.google.zxing.BarcodeFormat QR_CODE -> l
    com.google.zxing.BarcodeFormat RSS_14 -> m
    com.google.zxing.BarcodeFormat RSS_EXPANDED -> n
    com.google.zxing.BarcodeFormat UPC_A -> o
    com.google.zxing.BarcodeFormat UPC_E -> p
    com.google.zxing.BarcodeFormat UPC_EAN_EXTENSION -> q
    com.google.zxing.BarcodeFormat[] $VALUES -> r
    com.google.zxing.BarcodeFormat[] values() -> values
    com.google.zxing.BarcodeFormat valueOf(java.lang.String) -> valueOf
com.google.zxing.Binarizer -> com.google.zxing.b:
    com.google.zxing.LuminanceSource source -> a
    com.google.zxing.LuminanceSource getLuminanceSource() -> a
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> a
    com.google.zxing.common.BitMatrix getBlackMatrix() -> b
    com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource) -> a
    int getWidth() -> c
    int getHeight() -> d
com.google.zxing.BinaryBitmap -> com.google.zxing.c:
    com.google.zxing.Binarizer binarizer -> a
    com.google.zxing.common.BitMatrix matrix -> b
    int getWidth() -> a
    int getHeight() -> b
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> a
    com.google.zxing.common.BitMatrix getBlackMatrix() -> c
    boolean isRotateSupported() -> d
    com.google.zxing.BinaryBitmap rotateCounterClockwise() -> e
com.google.zxing.ChecksumException -> com.google.zxing.d:
    com.google.zxing.ChecksumException instance -> a
    com.google.zxing.ChecksumException getChecksumInstance() -> a
com.google.zxing.DecodeHintType -> com.google.zxing.e:
    com.google.zxing.DecodeHintType OTHER -> a
    com.google.zxing.DecodeHintType PURE_BARCODE -> b
    com.google.zxing.DecodeHintType POSSIBLE_FORMATS -> c
    com.google.zxing.DecodeHintType TRY_HARDER -> d
    com.google.zxing.DecodeHintType CHARACTER_SET -> e
    com.google.zxing.DecodeHintType ALLOWED_LENGTHS -> f
    com.google.zxing.DecodeHintType ASSUME_CODE_39_CHECK_DIGIT -> g
    com.google.zxing.DecodeHintType NEED_RESULT_POINT_CALLBACK -> h
    com.google.zxing.DecodeHintType[] $VALUES -> i
    com.google.zxing.DecodeHintType[] values() -> values
    com.google.zxing.DecodeHintType valueOf(java.lang.String) -> valueOf
com.google.zxing.EncodeHintType -> com.google.zxing.f:
    com.google.zxing.EncodeHintType ERROR_CORRECTION -> a
    com.google.zxing.EncodeHintType CHARACTER_SET -> b
    com.google.zxing.EncodeHintType MARGIN -> c
    com.google.zxing.EncodeHintType PDF417_COMPACT -> d
    com.google.zxing.EncodeHintType PDF417_COMPACTION -> e
    com.google.zxing.EncodeHintType PDF417_DIMENSIONS -> f
    com.google.zxing.EncodeHintType[] $VALUES -> g
    com.google.zxing.EncodeHintType[] values() -> values
    com.google.zxing.EncodeHintType valueOf(java.lang.String) -> valueOf
com.google.zxing.FormatException -> com.google.zxing.g:
    com.google.zxing.FormatException instance -> a
    com.google.zxing.FormatException getFormatInstance() -> a
com.google.zxing.LuminanceSource -> com.google.zxing.h:
    int width -> a
    int height -> b
    byte[] getRow(int,byte[]) -> a
    byte[] getMatrix() -> a
    int getWidth() -> b
    int getHeight() -> c
    boolean isRotateSupported() -> d
    com.google.zxing.LuminanceSource rotateCounterClockwise() -> e
    java.lang.String toString() -> toString
com.google.zxing.MultiFormatReader -> com.google.zxing.i:
    java.util.Map hints -> a
    com.google.zxing.Reader[] readers -> b
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    com.google.zxing.Result decodeWithState(com.google.zxing.BinaryBitmap) -> a
    void setHints(java.util.Map) -> a
    void reset() -> a
    com.google.zxing.Result decodeInternal(com.google.zxing.BinaryBitmap) -> b
com.google.zxing.MultiFormatWriter -> com.google.zxing.j:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
com.google.zxing.MultiFormatWriter$1 -> com.google.zxing.k:
    int[] $SwitchMap$com$google$zxing$BarcodeFormat -> a
com.google.zxing.NotFoundException -> com.google.zxing.l:
    com.google.zxing.NotFoundException instance -> a
    com.google.zxing.NotFoundException getNotFoundInstance() -> a
com.google.zxing.PlanarYUVLuminanceSource -> com.google.zxing.m:
    byte[] yuvData -> a
    int dataWidth -> b
    int dataHeight -> c
    int left -> d
    int top -> e
    byte[] getRow(int,byte[]) -> a
    byte[] getMatrix() -> a
    int[] renderThumbnail() -> f
    int getThumbnailWidth() -> g
    int getThumbnailHeight() -> h
    void reverseHorizontal(int,int) -> a
com.google.zxing.Reader -> com.google.zxing.n:
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
com.google.zxing.ReaderException -> com.google.zxing.o:
    java.lang.Throwable fillInStackTrace() -> fillInStackTrace
com.google.zxing.Result -> com.google.zxing.p:
    java.lang.String text -> a
    byte[] rawBytes -> b
    com.google.zxing.ResultPoint[] resultPoints -> c
    com.google.zxing.BarcodeFormat format -> d
    java.util.Map resultMetadata -> e
    long timestamp -> f
    java.lang.String getText() -> a
    byte[] getRawBytes() -> b
    com.google.zxing.ResultPoint[] getResultPoints() -> c
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> d
    java.util.Map getResultMetadata() -> e
    void putMetadata(com.google.zxing.ResultMetadataType,java.lang.Object) -> a
    void putAllMetadata(java.util.Map) -> a
    void addResultPoints(com.google.zxing.ResultPoint[]) -> a
    java.lang.String toString() -> toString
com.google.zxing.ResultMetadataType -> com.google.zxing.q:
    com.google.zxing.ResultMetadataType OTHER -> a
    com.google.zxing.ResultMetadataType ORIENTATION -> b
    com.google.zxing.ResultMetadataType BYTE_SEGMENTS -> c
    com.google.zxing.ResultMetadataType ERROR_CORRECTION_LEVEL -> d
    com.google.zxing.ResultMetadataType ISSUE_NUMBER -> e
    com.google.zxing.ResultMetadataType SUGGESTED_PRICE -> f
    com.google.zxing.ResultMetadataType POSSIBLE_COUNTRY -> g
    com.google.zxing.ResultMetadataType UPC_EAN_EXTENSION -> h
    com.google.zxing.ResultMetadataType[] $VALUES -> i
    com.google.zxing.ResultMetadataType[] values() -> values
    com.google.zxing.ResultMetadataType valueOf(java.lang.String) -> valueOf
com.google.zxing.ResultPoint -> com.google.zxing.r:
    float x -> a
    float y -> b
    float getX() -> a
    float getY() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void orderBestPatterns(com.google.zxing.ResultPoint[]) -> a
    float distance(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
    float crossProductZ(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
com.google.zxing.ResultPointCallback -> com.google.zxing.s:
    void foundPossibleResultPoint(com.google.zxing.ResultPoint) -> a
com.google.zxing.Writer -> com.google.zxing.t:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
com.google.zxing.WriterException -> com.google.zxing.u:
com.google.zxing.aztec.AztecDetectorResult -> com.google.zxing.a.a:
    boolean compact -> a
    int nbDatablocks -> b
    int nbLayers -> c
    int getNbLayers() -> a
    int getNbDatablocks() -> b
    boolean isCompact() -> c
com.google.zxing.aztec.AztecReader -> com.google.zxing.a.b:
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
com.google.zxing.aztec.decoder.Decoder -> com.google.zxing.a.a.a:
    int[] NB_BITS_COMPACT -> a
    int[] NB_BITS -> b
    int[] NB_DATABLOCK_COMPACT -> c
    int[] NB_DATABLOCK -> d
    java.lang.String[] UPPER_TABLE -> e
    java.lang.String[] LOWER_TABLE -> f
    java.lang.String[] MIXED_TABLE -> g
    java.lang.String[] PUNCT_TABLE -> h
    java.lang.String[] DIGIT_TABLE -> i
    int numCodewords -> j
    int codewordSize -> k
    com.google.zxing.aztec.AztecDetectorResult ddata -> l
    int invertedBitCount -> m
    com.google.zxing.common.DecoderResult decode(com.google.zxing.aztec.AztecDetectorResult) -> a
    java.lang.String getEncodedData(boolean[]) -> a
    com.google.zxing.aztec.decoder.Decoder$Table getTable(char) -> a
    java.lang.String getCharacter(com.google.zxing.aztec.decoder.Decoder$Table,int) -> a
    boolean[] correctBits(boolean[]) -> b
    boolean[] extractBits(com.google.zxing.common.BitMatrix) -> a
    com.google.zxing.common.BitMatrix removeDashedLines(com.google.zxing.common.BitMatrix) -> b
    int readCode(boolean[],int,int) -> a
com.google.zxing.aztec.decoder.Decoder$1 -> com.google.zxing.a.a.b:
    int[] $SwitchMap$com$google$zxing$aztec$decoder$Decoder$Table -> a
com.google.zxing.aztec.decoder.Decoder$Table -> com.google.zxing.a.a.c:
    com.google.zxing.aztec.decoder.Decoder$Table UPPER -> a
    com.google.zxing.aztec.decoder.Decoder$Table LOWER -> b
    com.google.zxing.aztec.decoder.Decoder$Table MIXED -> c
    com.google.zxing.aztec.decoder.Decoder$Table DIGIT -> d
    com.google.zxing.aztec.decoder.Decoder$Table PUNCT -> e
    com.google.zxing.aztec.decoder.Decoder$Table BINARY -> f
    com.google.zxing.aztec.decoder.Decoder$Table[] $VALUES -> g
    com.google.zxing.aztec.decoder.Decoder$Table[] values() -> values
    com.google.zxing.aztec.decoder.Decoder$Table valueOf(java.lang.String) -> valueOf
com.google.zxing.aztec.detector.Detector -> com.google.zxing.a.b.a:
    com.google.zxing.common.BitMatrix image -> a
    boolean compact -> b
    int nbLayers -> c
    int nbDataBlocks -> d
    int nbCenterLayers -> e
    int shift -> f
    com.google.zxing.aztec.AztecDetectorResult detect() -> a
    void extractParameters(com.google.zxing.aztec.detector.Detector$Point[]) -> a
    com.google.zxing.ResultPoint[] getMatrixCornerPoints(com.google.zxing.aztec.detector.Detector$Point[]) -> b
    void correctParameterData(boolean[],boolean) -> a
    com.google.zxing.aztec.detector.Detector$Point[] getBullEyeCornerPoints(com.google.zxing.aztec.detector.Detector$Point) -> a
    com.google.zxing.aztec.detector.Detector$Point getMatrixCenter() -> b
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
    void getParameters(boolean[]) -> a
    boolean[] sampleLine(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point,int) -> a
    boolean isWhiteOrBlackRectangle(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point) -> a
    int getColor(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point) -> a
    com.google.zxing.aztec.detector.Detector$Point getFirstDifferent(com.google.zxing.aztec.detector.Detector$Point,boolean,int,int) -> a
    boolean isValid(int,int) -> a
    float distance(com.google.zxing.aztec.detector.Detector$Point,com.google.zxing.aztec.detector.Detector$Point) -> b
com.google.zxing.aztec.detector.Detector$Point -> com.google.zxing.a.b.b:
    int x -> a
    int y -> b
    com.google.zxing.ResultPoint toResultPoint() -> a
com.google.zxing.client.android.AmbientLightManager -> com.google.zxing.client.android.a:
    android.content.Context context -> a
    com.google.zxing.client.android.camera.CameraManager cameraManager -> b
    android.hardware.Sensor lightSensor -> c
    void start(com.google.zxing.client.android.camera.CameraManager) -> a
    void stop() -> a
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
com.google.zxing.client.android.BeepManager -> com.google.zxing.client.android.b:
    java.lang.String TAG -> a
    android.app.Activity activity -> b
    android.media.MediaPlayer mediaPlayer -> c
    boolean playBeep -> d
    boolean vibrate -> e
    void updatePrefs() -> a
    void playBeepSoundAndVibrate() -> b
    boolean shouldBeep(android.content.SharedPreferences,android.content.Context) -> a
    android.media.MediaPlayer buildMediaPlayer(android.content.Context) -> a
com.google.zxing.client.android.BeepManager$1 -> com.google.zxing.client.android.c:
    void onCompletion(android.media.MediaPlayer) -> onCompletion
com.google.zxing.client.android.DecodeFormatManager -> com.google.zxing.client.android.d:
    java.util.regex.Pattern COMMA_PATTERN -> e
    java.util.Collection PRODUCT_FORMATS -> a
    java.util.Collection ONE_D_FORMATS -> b
    java.util.Collection QR_CODE_FORMATS -> c
    java.util.Collection DATA_MATRIX_FORMATS -> d
com.google.zxing.client.android.DecodeHandler -> com.google.zxing.client.android.e:
    java.lang.String TAG -> a
    com.google.zxing.client.android.DecoderActivity activity -> b
    com.google.zxing.MultiFormatReader multiFormatReader -> c
    boolean running -> d
    void handleMessage(android.os.Message) -> handleMessage
    void decode(byte[],int,int) -> a
    void bundleThumbnail(com.google.zxing.PlanarYUVLuminanceSource,android.os.Bundle) -> a
com.google.zxing.client.android.DecodeThread -> com.google.zxing.client.android.f:
    com.google.zxing.client.android.DecoderActivity activity -> a
    java.util.Map hints -> b
    android.os.Handler handler -> c
    java.util.concurrent.CountDownLatch handlerInitLatch -> d
    android.os.Handler getHandler() -> a
    void run() -> run
com.google.zxing.client.android.DecoderActivity -> com.google.zxing.client.android.DecoderActivity:
    java.lang.String TAG -> b
    com.google.zxing.client.android.ViewfinderView viewfinderView -> a
    com.google.zxing.client.android.camera.CameraManager cameraManager -> c
    com.google.zxing.client.android.DecoderActivityHandler handler -> d
    com.google.zxing.Result savedResultToShow -> e
    boolean hasSurface -> f
    java.util.Collection decodeFormats -> g
    java.lang.String characterSet -> h
    com.google.zxing.client.android.InactivityTimer inactivityTimer -> i
    com.google.zxing.client.android.BeepManager beepManager -> j
    com.google.zxing.client.android.AmbientLightManager ambientLightManager -> k
    com.google.zxing.client.android.ViewfinderView getViewfinderView() -> a
    android.os.Handler getHandler() -> b
    com.google.zxing.client.android.camera.CameraManager getCameraManager() -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void decodeOrStoreSavedBitmap(android.graphics.Bitmap,com.google.zxing.Result) -> a
    void surfaceCreated(android.view.SurfaceHolder) -> surfaceCreated
    void surfaceDestroyed(android.view.SurfaceHolder) -> surfaceDestroyed
    void surfaceChanged(android.view.SurfaceHolder,int,int,int) -> surfaceChanged
    void handleDecode(com.google.zxing.Result,android.graphics.Bitmap,float) -> a
    void handleDecodeInternally(com.google.zxing.Result,android.graphics.Bitmap) -> a
    void drawResultPoints(android.graphics.Bitmap,float,com.google.zxing.Result) -> a
    void drawLine(android.graphics.Canvas,android.graphics.Paint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,float) -> a
    void initCamera(android.view.SurfaceHolder) -> a
    void displayFrameworkBugMessageAndExit() -> e
    void drawViewfinder() -> d
com.google.zxing.client.android.DecoderActivityHandler -> com.google.zxing.client.android.g:
    java.lang.String TAG -> a
    com.google.zxing.client.android.DecoderActivity activity -> b
    com.google.zxing.client.android.DecodeThread decodeThread -> c
    com.google.zxing.client.android.DecoderActivityHandler$State state -> d
    com.google.zxing.client.android.camera.CameraManager cameraManager -> e
    void handleMessage(android.os.Message) -> handleMessage
    void quitSynchronously() -> a
    void restartPreviewAndDecode() -> b
com.google.zxing.client.android.DecoderActivityHandler$State -> com.google.zxing.client.android.h:
    com.google.zxing.client.android.DecoderActivityHandler$State PREVIEW -> a
    com.google.zxing.client.android.DecoderActivityHandler$State SUCCESS -> b
    com.google.zxing.client.android.DecoderActivityHandler$State DONE -> c
    com.google.zxing.client.android.DecoderActivityHandler$State[] ENUM$VALUES -> d
    com.google.zxing.client.android.DecoderActivityHandler$State[] values() -> values
    com.google.zxing.client.android.DecoderActivityHandler$State valueOf(java.lang.String) -> valueOf
com.google.zxing.client.android.FinishListener -> com.google.zxing.client.android.i:
    android.app.Activity activityToFinish -> a
    void onCancel(android.content.DialogInterface) -> onCancel
    void onClick(android.content.DialogInterface,int) -> onClick
    void run() -> a
com.google.zxing.client.android.InactivityTimer -> com.google.zxing.client.android.j:
    java.lang.String TAG -> a
    android.app.Activity activity -> b
    com.google.zxing.client.android.common.executor.AsyncTaskExecInterface taskExec -> c
    android.content.BroadcastReceiver powerStatusReceiver -> d
    com.google.zxing.client.android.InactivityTimer$InactivityAsyncTask inactivityTask -> e
    void onActivity() -> a
    void onPause() -> b
    void onResume() -> c
    void cancel() -> f
    void shutdown() -> d
    void access$0(com.google.zxing.client.android.InactivityTimer) -> a
    java.lang.String access$1() -> e
    android.app.Activity access$2(com.google.zxing.client.android.InactivityTimer) -> b
com.google.zxing.client.android.InactivityTimer$InactivityAsyncTask -> com.google.zxing.client.android.k:
    com.google.zxing.client.android.InactivityTimer this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.google.zxing.client.android.InactivityTimer$PowerStatusReceiver -> com.google.zxing.client.android.l:
    com.google.zxing.client.android.InactivityTimer this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.zxing.client.android.R -> com.google.zxing.client.android.m:
com.google.zxing.client.android.R$color -> com.google.zxing.client.android.n:
    int status_text -> status_text
    int encode_view -> encode_view
    int viewfinder_mask -> viewfinder_mask
    int result_points -> result_points
    int result_view -> result_view
    int result_minor_text -> result_minor_text
    int possible_result_points -> possible_result_points
    int contents_text -> contents_text
    int result_text -> result_text
    int viewfinder_laser -> viewfinder_laser
    int transparent -> transparent
com.google.zxing.client.android.R$id -> com.google.zxing.client.android.o:
    int decode_succeeded -> decode_succeeded
    int time_text_view -> time_text_view
    int return_scan_result -> return_scan_result
    int barcode_image_view -> barcode_image_view
    int meta_text_view -> meta_text_view
    int meta_text_view_label -> meta_text_view_label
    int restart_preview -> restart_preview
    int preview_view -> preview_view
    int status_view -> status_view
    int quit -> quit
    int encode_btn -> encode_btn
    int image_view -> image_view
    int viewfinder_view -> viewfinder_view
    int encode_view -> encode_view
    int result_button_view -> result_button_view
    int launch_product_query -> launch_product_query
    int decode -> decode
    int result_view -> result_view
    int type_text_view -> type_text_view
    int contents_text_view -> contents_text_view
    int decode_failed -> decode_failed
    int contents_supplement_text_view -> contents_supplement_text_view
    int format_text_view -> format_text_view
com.google.zxing.client.android.R$layout -> com.google.zxing.client.android.p:
    int capture -> capture
    int decoder -> decoder
    int encoder -> encoder
com.google.zxing.client.android.R$raw -> com.google.zxing.client.android.q:
    int beep -> beep
com.google.zxing.client.android.R$string -> com.google.zxing.client.android.r:
    int button_ok -> button_ok
    int msg_default_status -> msg_default_status
    int preferences_supplemental_summary -> preferences_supplemental_summary
    int preferences_front_light_off -> preferences_front_light_off
    int preferences_general_title -> preferences_general_title
    int preferences_remember_duplicates_summary -> preferences_remember_duplicates_summary
    int button_get_directions -> button_get_directions
    int msg_default_format -> msg_default_format
    int preferences_scanning_title -> preferences_scanning_title
    int preferences_disable_exposure_title -> preferences_disable_exposure_title
    int button_back -> button_back
    int preferences_custom_product_search_title -> preferences_custom_product_search_title
    int preferences_try_bsplus -> preferences_try_bsplus
    int preferences_device_bug_workarounds_title -> preferences_device_bug_workarounds_title
    int msg_unmount_usb -> msg_unmount_usb
    int preferences_disable_continuous_focus_summary -> preferences_disable_continuous_focus_summary
    int preferences_front_light_title -> preferences_front_light_title
    int preferences_auto_focus_title -> preferences_auto_focus_title
    int button_open_browser -> button_open_browser
    int msg_default_type -> msg_default_type
    int msg_default_mms_subject -> msg_default_mms_subject
    int preferences_front_light_on -> preferences_front_light_on
    int msg_default_time -> msg_default_time
    int preferences_search_country -> preferences_search_country
    int preferences_copy_to_clipboard_title -> preferences_copy_to_clipboard_title
    int preferences_try_bsplus_summary -> preferences_try_bsplus_summary
    int preferences_front_light_auto -> preferences_front_light_auto
    int msg_encode_contents_failed -> msg_encode_contents_failed
    int preferences_name -> preferences_name
    int msg_intent_failed -> msg_intent_failed
    int preferences_play_beep_title -> preferences_play_beep_title
    int button_done -> button_done
    int preferences_vibrate_title -> preferences_vibrate_title
    int app_name -> app_name
    int preferences_supplemental_title -> preferences_supplemental_title
    int preferences_decode_1D_title -> preferences_decode_1D_title
    int preferences_custom_product_search_summary -> preferences_custom_product_search_summary
    int preferences_disable_continuous_focus_title -> preferences_disable_continuous_focus_title
    int button_cancel -> button_cancel
    int msg_sure -> msg_sure
    int preferences_front_light_summary -> preferences_front_light_summary
    int preferences_decode_QR_title -> preferences_decode_QR_title
    int msg_camera_framework_bug -> msg_camera_framework_bug
    int preferences_actions_title -> preferences_actions_title
    int preferences_bulk_mode_summary -> preferences_bulk_mode_summary
    int preferences_result_title -> preferences_result_title
    int preferences_remember_duplicates_title -> preferences_remember_duplicates_title
    int preferences_bulk_mode_title -> preferences_bulk_mode_title
    int preferences_decode_Data_Matrix_title -> preferences_decode_Data_Matrix_title
    int msg_redirect -> msg_redirect
    int msg_default_meta -> msg_default_meta
com.google.zxing.client.android.ViewfinderResultPointCallback -> com.google.zxing.client.android.s:
    com.google.zxing.client.android.ViewfinderView viewfinderView -> a
    void foundPossibleResultPoint(com.google.zxing.ResultPoint) -> a
com.google.zxing.client.android.ViewfinderView -> com.google.zxing.client.android.ViewfinderView:
    int[] SCANNER_ALPHA -> a
    com.google.zxing.client.android.camera.CameraManager cameraManager -> b
    android.graphics.Paint paint -> c
    android.graphics.Bitmap resultBitmap -> d
    int maskColor -> e
    int resultColor -> f
    int laserColor -> g
    int resultPointColor -> h
    int scannerAlpha -> i
    java.util.List possibleResultPoints -> j
    java.util.List lastPossibleResultPoints -> k
    void setCameraManager(com.google.zxing.client.android.camera.CameraManager) -> setCameraManager
    void onDraw(android.graphics.Canvas) -> onDraw
    void drawViewfinder() -> a
    void addPossibleResultPoint(com.google.zxing.ResultPoint) -> a
com.google.zxing.client.android.camera.AutoFocusManager -> com.google.zxing.client.android.camera.a:
    java.lang.String TAG -> a
    java.util.Collection FOCUS_MODES_CALLING_AF -> b
    boolean active -> c
    boolean useAutoFocus -> d
    android.hardware.Camera camera -> e
    com.google.zxing.client.android.camera.AutoFocusManager$AutoFocusTask outstandingTask -> f
    com.google.zxing.client.android.common.executor.AsyncTaskExecInterface taskExec -> g
    void onAutoFocus(boolean,android.hardware.Camera) -> onAutoFocus
    void start() -> a
    void stop() -> b
    boolean access$0(com.google.zxing.client.android.camera.AutoFocusManager) -> a
com.google.zxing.client.android.camera.AutoFocusManager$AutoFocusTask -> com.google.zxing.client.android.camera.b:
    com.google.zxing.client.android.camera.AutoFocusManager this$0 -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.google.zxing.client.android.camera.CameraConfigurationManager -> com.google.zxing.client.android.camera.c:
    android.content.Context context -> a
    android.graphics.Point screenResolution -> b
    android.graphics.Point cameraResolution -> c
    void initFromCameraParameters(android.hardware.Camera) -> a
    void setDesiredCameraParameters(android.hardware.Camera,boolean) -> a
    android.graphics.Point getCameraResolution() -> a
    android.graphics.Point getScreenResolution() -> b
    boolean getTorchState(android.hardware.Camera) -> b
    void setTorch(android.hardware.Camera,boolean) -> b
    void initializeTorch(android.hardware.Camera$Parameters,android.content.SharedPreferences,boolean) -> a
    void doSetTorch(android.hardware.Camera$Parameters,boolean,boolean) -> a
    android.graphics.Point findBestPreviewSizeValue(android.hardware.Camera$Parameters,android.graphics.Point) -> a
    java.lang.String findSettableValue(java.util.Collection,java.lang.String[]) -> a
com.google.zxing.client.android.camera.CameraConfigurationManager$1 -> com.google.zxing.client.android.camera.d:
    com.google.zxing.client.android.camera.CameraConfigurationManager this$0 -> a
    int compare(android.hardware.Camera$Size,android.hardware.Camera$Size) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.zxing.client.android.camera.CameraManager -> com.google.zxing.client.android.camera.e:
    java.lang.String TAG -> a
    android.content.Context context -> b
    com.google.zxing.client.android.camera.CameraConfigurationManager configManager -> c
    android.hardware.Camera camera -> d
    com.google.zxing.client.android.camera.AutoFocusManager autoFocusManager -> e
    android.graphics.Rect framingRect -> f
    android.graphics.Rect framingRectInPreview -> g
    boolean initialized -> h
    boolean previewing -> i
    int requestedFramingRectWidth -> j
    int requestedFramingRectHeight -> k
    com.google.zxing.client.android.camera.PreviewCallback previewCallback -> l
    void openDriver(android.view.SurfaceHolder) -> a
    boolean isOpen() -> a
    void closeDriver() -> b
    void startPreview() -> c
    void stopPreview() -> d
    void setTorch(boolean) -> a
    void requestPreviewFrame(android.os.Handler,int) -> a
    android.graphics.Rect getFramingRect() -> e
    android.graphics.Rect getFramingRectInPreview() -> f
    void setManualFramingRect(int,int) -> a
    com.google.zxing.PlanarYUVLuminanceSource buildLuminanceSource(byte[],int,int) -> a
com.google.zxing.client.android.camera.FrontLightMode -> com.google.zxing.client.android.camera.f:
    com.google.zxing.client.android.camera.FrontLightMode ON -> a
    com.google.zxing.client.android.camera.FrontLightMode AUTO -> b
    com.google.zxing.client.android.camera.FrontLightMode OFF -> c
    com.google.zxing.client.android.camera.FrontLightMode[] ENUM$VALUES -> d
    com.google.zxing.client.android.camera.FrontLightMode parse(java.lang.String) -> a
    com.google.zxing.client.android.camera.FrontLightMode readPref(android.content.SharedPreferences) -> a
    com.google.zxing.client.android.camera.FrontLightMode[] values() -> values
    com.google.zxing.client.android.camera.FrontLightMode valueOf(java.lang.String) -> valueOf
com.google.zxing.client.android.camera.PreviewCallback -> com.google.zxing.client.android.camera.g:
    java.lang.String TAG -> a
    com.google.zxing.client.android.camera.CameraConfigurationManager configManager -> b
    android.os.Handler previewHandler -> c
    int previewMessage -> d
    void setHandler(android.os.Handler,int) -> a
    void onPreviewFrame(byte[],android.hardware.Camera) -> onPreviewFrame
com.google.zxing.client.android.camera.open.DefaultOpenCameraInterface -> com.google.zxing.client.android.camera.open.DefaultOpenCameraInterface:
    android.hardware.Camera open() -> a
com.google.zxing.client.android.camera.open.GingerbreadOpenCameraInterface -> com.google.zxing.client.android.camera.open.GingerbreadOpenCameraInterface:
    android.hardware.Camera open() -> a
com.google.zxing.client.android.camera.open.OpenCameraInterface -> com.google.zxing.client.android.camera.open.OpenCameraInterface:
    android.hardware.Camera open() -> a
com.google.zxing.client.android.camera.open.OpenCameraManager -> com.google.zxing.client.android.camera.open.OpenCameraManager:
com.google.zxing.client.android.common.PlatformSupportManager -> com.google.zxing.client.android.common.a:
    java.lang.String TAG -> a
    java.lang.Class managedInterface -> b
    java.lang.Object defaultImplementation -> c
    java.util.SortedMap implementations -> d
    void addImplementationClass(int,java.lang.String) -> a
    java.lang.Object build() -> a
com.google.zxing.client.android.common.executor.AsyncTaskExecInterface -> com.google.zxing.client.android.common.executor.AsyncTaskExecInterface:
    void execute(android.os.AsyncTask,java.lang.Object[]) -> a
com.google.zxing.client.android.common.executor.AsyncTaskExecManager -> com.google.zxing.client.android.common.executor.AsyncTaskExecManager:
com.google.zxing.client.android.common.executor.DefaultAsyncTaskExecInterface -> com.google.zxing.client.android.common.executor.DefaultAsyncTaskExecInterface:
    void execute(android.os.AsyncTask,java.lang.Object[]) -> a
com.google.zxing.client.android.common.executor.HoneycombAsyncTaskExecInterface -> com.google.zxing.client.android.common.executor.HoneycombAsyncTaskExecInterface:
    void execute(android.os.AsyncTask,java.lang.Object[]) -> a
com.google.zxing.common.BitArray -> com.google.zxing.b.a:
    int[] bits -> a
    int size -> b
    int getSize() -> a
    int getSizeInBytes() -> b
    void ensureCapacity(int) -> e
    boolean get(int) -> a
    void set(int) -> b
    int getNextSet(int) -> c
    int getNextUnset(int) -> d
    void clear() -> c
    boolean isRange(int,int,boolean) -> a
    void appendBit(boolean) -> a
    void appendBits(int,int) -> a
    void appendBitArray(com.google.zxing.common.BitArray) -> a
    void xor(com.google.zxing.common.BitArray) -> b
    void toBytes(int,byte[],int,int) -> a
    void reverse() -> d
    int[] makeArray(int) -> f
    java.lang.String toString() -> toString
com.google.zxing.common.BitMatrix -> com.google.zxing.b.b:
    int width -> a
    int height -> b
    int rowSize -> c
    int[] bits -> d
    boolean get(int,int) -> a
    void set(int,int) -> b
    void flip(int,int) -> c
    void clear() -> a
    void setRegion(int,int,int,int) -> a
    int[] getEnclosingRectangle() -> b
    int[] getTopLeftOnBit() -> c
    int[] getBottomRightOnBit() -> d
    int getWidth() -> e
    int getHeight() -> f
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.google.zxing.common.BitSource -> com.google.zxing.b.c:
    byte[] bytes -> a
    int byteOffset -> b
    int bitOffset -> c
    int getBitOffset() -> a
    int getByteOffset() -> b
    int readBits(int) -> a
    int available() -> c
com.google.zxing.common.CharacterSetECI -> com.google.zxing.b.d:
    com.google.zxing.common.CharacterSetECI Cp437 -> a
    com.google.zxing.common.CharacterSetECI ISO8859_1 -> b
    com.google.zxing.common.CharacterSetECI ISO8859_2 -> c
    com.google.zxing.common.CharacterSetECI ISO8859_3 -> d
    com.google.zxing.common.CharacterSetECI ISO8859_4 -> e
    com.google.zxing.common.CharacterSetECI ISO8859_5 -> f
    com.google.zxing.common.CharacterSetECI ISO8859_6 -> g
    com.google.zxing.common.CharacterSetECI ISO8859_7 -> h
    com.google.zxing.common.CharacterSetECI ISO8859_8 -> i
    com.google.zxing.common.CharacterSetECI ISO8859_9 -> j
    com.google.zxing.common.CharacterSetECI ISO8859_10 -> k
    com.google.zxing.common.CharacterSetECI ISO8859_11 -> l
    com.google.zxing.common.CharacterSetECI ISO8859_13 -> m
    com.google.zxing.common.CharacterSetECI ISO8859_14 -> n
    com.google.zxing.common.CharacterSetECI ISO8859_15 -> o
    com.google.zxing.common.CharacterSetECI ISO8859_16 -> p
    com.google.zxing.common.CharacterSetECI SJIS -> q
    com.google.zxing.common.CharacterSetECI Cp1250 -> r
    com.google.zxing.common.CharacterSetECI Cp1251 -> s
    com.google.zxing.common.CharacterSetECI Cp1252 -> t
    com.google.zxing.common.CharacterSetECI Cp1256 -> u
    com.google.zxing.common.CharacterSetECI UnicodeBigUnmarked -> v
    com.google.zxing.common.CharacterSetECI UTF8 -> w
    com.google.zxing.common.CharacterSetECI ASCII -> x
    com.google.zxing.common.CharacterSetECI Big5 -> y
    com.google.zxing.common.CharacterSetECI GB18030 -> z
    com.google.zxing.common.CharacterSetECI EUC_KR -> A
    java.util.Map VALUE_TO_ECI -> B
    java.util.Map NAME_TO_ECI -> C
    int[] values -> D
    java.lang.String[] otherEncodingNames -> E
    com.google.zxing.common.CharacterSetECI[] $VALUES -> F
    com.google.zxing.common.CharacterSetECI[] values() -> values
    com.google.zxing.common.CharacterSetECI valueOf(java.lang.String) -> valueOf
    int getValue() -> a
    com.google.zxing.common.CharacterSetECI getCharacterSetECIByValue(int) -> a
    com.google.zxing.common.CharacterSetECI getCharacterSetECIByName(java.lang.String) -> a
com.google.zxing.common.DecoderResult -> com.google.zxing.b.e:
    byte[] rawBytes -> a
    java.lang.String text -> b
    java.util.List byteSegments -> c
    java.lang.String ecLevel -> d
    byte[] getRawBytes() -> a
    java.lang.String getText() -> b
    java.util.List getByteSegments() -> c
    java.lang.String getECLevel() -> d
com.google.zxing.common.DefaultGridSampler -> com.google.zxing.b.f:
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,com.google.zxing.common.PerspectiveTransform) -> a
com.google.zxing.common.DetectorResult -> com.google.zxing.b.g:
    com.google.zxing.common.BitMatrix bits -> a
    com.google.zxing.ResultPoint[] points -> b
    com.google.zxing.common.BitMatrix getBits() -> d
    com.google.zxing.ResultPoint[] getPoints() -> e
com.google.zxing.common.GlobalHistogramBinarizer -> com.google.zxing.b.h:
    byte[] EMPTY -> a
    byte[] luminances -> b
    int[] buckets -> c
    com.google.zxing.common.BitArray getBlackRow(int,com.google.zxing.common.BitArray) -> a
    com.google.zxing.common.BitMatrix getBlackMatrix() -> b
    com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource) -> a
    void initArrays(int) -> a
    int estimateBlackPoint(int[]) -> a
com.google.zxing.common.GridSampler -> com.google.zxing.b.i:
    com.google.zxing.common.GridSampler gridSampler -> a
    com.google.zxing.common.GridSampler getInstance() -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,int,int,com.google.zxing.common.PerspectiveTransform) -> a
    void checkAndNudgePoints(com.google.zxing.common.BitMatrix,float[]) -> a
com.google.zxing.common.HybridBinarizer -> com.google.zxing.b.j:
    com.google.zxing.common.BitMatrix matrix -> a
    com.google.zxing.common.BitMatrix getBlackMatrix() -> b
    com.google.zxing.Binarizer createBinarizer(com.google.zxing.LuminanceSource) -> a
    void calculateThresholdForBlock(byte[],int,int,int,int,int[][],com.google.zxing.common.BitMatrix) -> a
    int cap(int,int,int) -> a
    void thresholdBlock(byte[],int,int,int,int,com.google.zxing.common.BitMatrix) -> a
    int[][] calculateBlackPoints(byte[],int,int,int,int) -> a
com.google.zxing.common.PerspectiveTransform -> com.google.zxing.b.k:
    float a11 -> a
    float a12 -> b
    float a13 -> c
    float a21 -> d
    float a22 -> e
    float a23 -> f
    float a31 -> g
    float a32 -> h
    float a33 -> i
    com.google.zxing.common.PerspectiveTransform quadrilateralToQuadrilateral(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float) -> a
    void transformPoints(float[]) -> a
    com.google.zxing.common.PerspectiveTransform squareToQuadrilateral(float,float,float,float,float,float,float,float) -> a
    com.google.zxing.common.PerspectiveTransform quadrilateralToSquare(float,float,float,float,float,float,float,float) -> b
    com.google.zxing.common.PerspectiveTransform buildAdjoint() -> a
    com.google.zxing.common.PerspectiveTransform times(com.google.zxing.common.PerspectiveTransform) -> a
com.google.zxing.common.StringUtils -> com.google.zxing.b.l:
    java.lang.String PLATFORM_DEFAULT_ENCODING -> a
    boolean ASSUME_SHIFT_JIS -> b
    java.lang.String guessEncoding(byte[],java.util.Map) -> a
com.google.zxing.common.detector.MathUtils -> com.google.zxing.b.a.a:
    int round(float) -> a
    float distance(float,float,float,float) -> a
    float distance(int,int,int,int) -> a
com.google.zxing.common.detector.WhiteRectangleDetector -> com.google.zxing.b.a.b:
    com.google.zxing.common.BitMatrix image -> a
    int height -> b
    int width -> c
    int leftInit -> d
    int rightInit -> e
    int downInit -> f
    int upInit -> g
    com.google.zxing.ResultPoint[] detect() -> a
    com.google.zxing.ResultPoint getBlackPointOnSegment(float,float,float,float) -> a
    com.google.zxing.ResultPoint[] centerEdges(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
    boolean containsBlackPoint(int,int,int,boolean) -> a
com.google.zxing.common.reedsolomon.GenericGF -> com.google.zxing.b.b.a:
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_12 -> a
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_10 -> b
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_6 -> c
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_PARAM -> d
    com.google.zxing.common.reedsolomon.GenericGF QR_CODE_FIELD_256 -> e
    com.google.zxing.common.reedsolomon.GenericGF DATA_MATRIX_FIELD_256 -> f
    com.google.zxing.common.reedsolomon.GenericGF AZTEC_DATA_8 -> g
    com.google.zxing.common.reedsolomon.GenericGF MAXICODE_FIELD_64 -> h
    int[] expTable -> i
    int[] logTable -> j
    com.google.zxing.common.reedsolomon.GenericGFPoly zero -> k
    com.google.zxing.common.reedsolomon.GenericGFPoly one -> l
    int size -> m
    int primitive -> n
    boolean initialized -> o
    void initialize() -> d
    void checkInit() -> e
    com.google.zxing.common.reedsolomon.GenericGFPoly getZero() -> a
    com.google.zxing.common.reedsolomon.GenericGFPoly getOne() -> b
    com.google.zxing.common.reedsolomon.GenericGFPoly buildMonomial(int,int) -> a
    int addOrSubtract(int,int) -> b
    int exp(int) -> a
    int log(int) -> b
    int inverse(int) -> c
    int multiply(int,int) -> c
    int getSize() -> c
com.google.zxing.common.reedsolomon.GenericGFPoly -> com.google.zxing.b.b.b:
    com.google.zxing.common.reedsolomon.GenericGF field -> a
    int[] coefficients -> b
    int[] getCoefficients() -> a
    int getDegree() -> b
    boolean isZero() -> c
    int getCoefficient(int) -> a
    int evaluateAt(int) -> b
    com.google.zxing.common.reedsolomon.GenericGFPoly addOrSubtract(com.google.zxing.common.reedsolomon.GenericGFPoly) -> a
    com.google.zxing.common.reedsolomon.GenericGFPoly multiply(com.google.zxing.common.reedsolomon.GenericGFPoly) -> b
    com.google.zxing.common.reedsolomon.GenericGFPoly multiply(int) -> c
    com.google.zxing.common.reedsolomon.GenericGFPoly multiplyByMonomial(int,int) -> a
    com.google.zxing.common.reedsolomon.GenericGFPoly[] divide(com.google.zxing.common.reedsolomon.GenericGFPoly) -> c
    java.lang.String toString() -> toString
com.google.zxing.common.reedsolomon.ReedSolomonDecoder -> com.google.zxing.b.b.c:
    com.google.zxing.common.reedsolomon.GenericGF field -> a
    void decode(int[],int) -> a
    com.google.zxing.common.reedsolomon.GenericGFPoly[] runEuclideanAlgorithm(com.google.zxing.common.reedsolomon.GenericGFPoly,com.google.zxing.common.reedsolomon.GenericGFPoly,int) -> a
    int[] findErrorLocations(com.google.zxing.common.reedsolomon.GenericGFPoly) -> a
    int[] findErrorMagnitudes(com.google.zxing.common.reedsolomon.GenericGFPoly,int[],boolean) -> a
com.google.zxing.common.reedsolomon.ReedSolomonEncoder -> com.google.zxing.b.b.d:
    com.google.zxing.common.reedsolomon.GenericGF field -> a
    java.util.List cachedGenerators -> b
    com.google.zxing.common.reedsolomon.GenericGFPoly buildGenerator(int) -> a
    void encode(int[],int) -> a
com.google.zxing.common.reedsolomon.ReedSolomonException -> com.google.zxing.b.b.e:
com.google.zxing.datamatrix.DataMatrixReader -> com.google.zxing.c.a:
    com.google.zxing.ResultPoint[] NO_POINTS -> a
    com.google.zxing.datamatrix.decoder.Decoder decoder -> b
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
    com.google.zxing.common.BitMatrix extractPureBits(com.google.zxing.common.BitMatrix) -> a
    int moduleSize(int[],com.google.zxing.common.BitMatrix) -> a
com.google.zxing.datamatrix.decoder.BitMatrixParser -> com.google.zxing.c.a.a:
    com.google.zxing.common.BitMatrix mappingBitMatrix -> a
    com.google.zxing.common.BitMatrix readMappingMatrix -> b
    com.google.zxing.datamatrix.decoder.Version version -> c
    com.google.zxing.datamatrix.decoder.Version getVersion() -> a
    com.google.zxing.datamatrix.decoder.Version readVersion(com.google.zxing.common.BitMatrix) -> b
    byte[] readCodewords() -> b
    boolean readModule(int,int,int,int) -> a
    int readUtah(int,int,int,int) -> b
    int readCorner1(int,int) -> a
    int readCorner2(int,int) -> b
    int readCorner3(int,int) -> c
    int readCorner4(int,int) -> d
    com.google.zxing.common.BitMatrix extractDataRegion(com.google.zxing.common.BitMatrix) -> a
com.google.zxing.datamatrix.decoder.DataBlock -> com.google.zxing.c.a.b:
    int numDataCodewords -> a
    byte[] codewords -> b
    com.google.zxing.datamatrix.decoder.DataBlock[] getDataBlocks(byte[],com.google.zxing.datamatrix.decoder.Version) -> a
    int getNumDataCodewords() -> a
    byte[] getCodewords() -> b
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser -> com.google.zxing.c.a.c:
    char[] C40_BASIC_SET_CHARS -> a
    char[] C40_SHIFT2_SET_CHARS -> b
    char[] TEXT_BASIC_SET_CHARS -> c
    char[] TEXT_SHIFT3_SET_CHARS -> d
    com.google.zxing.common.DecoderResult decode(byte[]) -> a
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode decodeAsciiSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,java.lang.StringBuilder) -> a
    void decodeC40Segment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> a
    void decodeTextSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> b
    void decodeAnsiX12Segment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> c
    void parseTwoBytes(int,int,int[]) -> a
    void decodeEdifactSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder) -> d
    void decodeBase256Segment(com.google.zxing.common.BitSource,java.lang.StringBuilder,java.util.Collection) -> a
    int unrandomize255State(int,int) -> a
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$1 -> com.google.zxing.c.a.d:
    int[] $SwitchMap$com$google$zxing$datamatrix$decoder$DecodedBitStreamParser$Mode -> a
com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode -> com.google.zxing.c.a.e:
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode PAD_ENCODE -> a
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode ASCII_ENCODE -> b
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode C40_ENCODE -> c
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode TEXT_ENCODE -> d
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode ANSIX12_ENCODE -> e
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode EDIFACT_ENCODE -> f
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode BASE256_ENCODE -> g
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode[] $VALUES -> h
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode[] values() -> values
    com.google.zxing.datamatrix.decoder.DecodedBitStreamParser$Mode valueOf(java.lang.String) -> valueOf
com.google.zxing.datamatrix.decoder.Decoder -> com.google.zxing.c.a.f:
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> a
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix) -> a
    void correctErrors(byte[],int) -> a
com.google.zxing.datamatrix.decoder.Version -> com.google.zxing.c.a.g:
    com.google.zxing.datamatrix.decoder.Version[] VERSIONS -> a
    int versionNumber -> b
    int symbolSizeRows -> c
    int symbolSizeColumns -> d
    int dataRegionSizeRows -> e
    int dataRegionSizeColumns -> f
    com.google.zxing.datamatrix.decoder.Version$ECBlocks ecBlocks -> g
    int totalCodewords -> h
    int getVersionNumber() -> a
    int getSymbolSizeRows() -> b
    int getSymbolSizeColumns() -> c
    int getDataRegionSizeRows() -> d
    int getDataRegionSizeColumns() -> e
    int getTotalCodewords() -> f
    com.google.zxing.datamatrix.decoder.Version$ECBlocks getECBlocks() -> g
    com.google.zxing.datamatrix.decoder.Version getVersionForDimensions(int,int) -> a
    java.lang.String toString() -> toString
    com.google.zxing.datamatrix.decoder.Version[] buildVersions() -> h
com.google.zxing.datamatrix.decoder.Version$1 -> com.google.zxing.c.a.h:
com.google.zxing.datamatrix.decoder.Version$ECB -> com.google.zxing.c.a.i:
    int count -> a
    int dataCodewords -> b
    int getCount() -> a
    int getDataCodewords() -> b
com.google.zxing.datamatrix.decoder.Version$ECBlocks -> com.google.zxing.c.a.j:
    int ecCodewords -> a
    com.google.zxing.datamatrix.decoder.Version$ECB[] ecBlocks -> b
    int getECCodewords() -> a
    com.google.zxing.datamatrix.decoder.Version$ECB[] getECBlocks() -> b
com.google.zxing.datamatrix.detector.Detector -> com.google.zxing.c.b.a:
    com.google.zxing.common.BitMatrix image -> a
    com.google.zxing.common.detector.WhiteRectangleDetector rectangleDetector -> b
    com.google.zxing.common.DetectorResult detect() -> a
    com.google.zxing.ResultPoint correctTopRightRectangular(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int,int) -> a
    com.google.zxing.ResultPoint correctTopRight(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int) -> a
    boolean isValid(com.google.zxing.ResultPoint) -> a
    int distance(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
    void increment(java.util.Map,com.google.zxing.ResultPoint) -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int,int) -> a
    com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitions transitionsBetween(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> b
com.google.zxing.datamatrix.detector.Detector$1 -> com.google.zxing.c.b.b:
com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitions -> com.google.zxing.c.b.c:
    com.google.zxing.ResultPoint from -> a
    com.google.zxing.ResultPoint to -> b
    int transitions -> c
    com.google.zxing.ResultPoint getFrom() -> a
    com.google.zxing.ResultPoint getTo() -> b
    int getTransitions() -> c
    java.lang.String toString() -> toString
com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitionsComparator -> com.google.zxing.c.b.d:
    int compare(com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitions,com.google.zxing.datamatrix.detector.Detector$ResultPointsAndTransitions) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.zxing.maxicode.MaxiCodeReader -> com.google.zxing.d.a:
    com.google.zxing.ResultPoint[] NO_POINTS -> a
    com.google.zxing.maxicode.decoder.Decoder decoder -> b
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
    com.google.zxing.common.BitMatrix extractPureBits(com.google.zxing.common.BitMatrix) -> a
com.google.zxing.maxicode.decoder.BitMatrixParser -> com.google.zxing.d.a.a:
    int[][] BITNR -> a
    com.google.zxing.common.BitMatrix bitMatrix -> b
    byte[] readCodewords() -> a
com.google.zxing.maxicode.decoder.DecodedBitStreamParser -> com.google.zxing.d.a.b:
    java.text.NumberFormat NINE_DIGITS -> a
    java.text.NumberFormat THREE_DIGITS -> b
    java.lang.String[] SETS -> c
    com.google.zxing.common.DecoderResult decode(byte[],int) -> a
    int getBit(int,byte[]) -> a
    int getInt(byte[],byte[]) -> a
    int getCountry(byte[]) -> a
    int getServiceClass(byte[]) -> b
    int getPostCode2Length(byte[]) -> c
    int getPostCode2(byte[]) -> d
    java.lang.String getPostCode3(byte[]) -> e
    java.lang.String getMessage(byte[],int,int) -> a
com.google.zxing.maxicode.decoder.Decoder -> com.google.zxing.d.a.c:
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> a
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix,java.util.Map) -> a
    void correctErrors(byte[],int,int,int,int) -> a
com.google.zxing.oned.CodaBarReader -> com.google.zxing.e.a:
    char[] ALPHABET -> a
    int[] CHARACTER_ENCODINGS -> b
    char[] STARTEND_ENCODING -> c
    java.lang.StringBuilder decodeRowResult -> d
    int[] counters -> e
    int counterLength -> f
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void validatePattern(int) -> a
    void setCounters(com.google.zxing.common.BitArray) -> a
    void counterAppend(int) -> b
    int findStartPattern() -> b
    boolean arrayContains(char[],char) -> a
    int toNarrowWidePattern(int) -> c
com.google.zxing.oned.CodaBarWriter -> com.google.zxing.e.b:
    char[] START_CHARS -> a
    char[] END_CHARS -> b
    boolean[] encode(java.lang.String) -> a
com.google.zxing.oned.Code128Reader -> com.google.zxing.e.c:
    int[][] CODE_PATTERNS -> a
    int[] findStartPattern(com.google.zxing.common.BitArray) -> a
    int decodeCode(com.google.zxing.common.BitArray,int[],int) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
com.google.zxing.oned.Code128Writer -> com.google.zxing.e.d:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    boolean[] encode(java.lang.String) -> a
    boolean isDigits(java.lang.CharSequence,int,int) -> a
com.google.zxing.oned.Code39Reader -> com.google.zxing.e.e:
    char[] ALPHABET -> b
    int[] CHARACTER_ENCODINGS -> a
    int ASTERISK_ENCODING -> c
    boolean usingCheckDigit -> d
    boolean extendedMode -> e
    java.lang.StringBuilder decodeRowResult -> f
    int[] counters -> g
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    int[] findAsteriskPattern(com.google.zxing.common.BitArray,int[]) -> a
    int toNarrowWidePattern(int[]) -> a
    char patternToChar(int) -> a
    java.lang.String decodeExtended(java.lang.CharSequence) -> a
com.google.zxing.oned.Code39Writer -> com.google.zxing.e.f:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    boolean[] encode(java.lang.String) -> a
    void toIntArray(int,int[]) -> a
com.google.zxing.oned.Code93Reader -> com.google.zxing.e.g:
    char[] ALPHABET -> a
    int[] CHARACTER_ENCODINGS -> b
    int ASTERISK_ENCODING -> c
    java.lang.StringBuilder decodeRowResult -> d
    int[] counters -> e
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    int[] findAsteriskPattern(com.google.zxing.common.BitArray) -> a
    int toPattern(int[]) -> a
    char patternToChar(int) -> a
    java.lang.String decodeExtended(java.lang.CharSequence) -> a
    void checkChecksums(java.lang.CharSequence) -> b
    void checkOneChecksum(java.lang.CharSequence,int,int) -> a
com.google.zxing.oned.EAN13Reader -> com.google.zxing.e.h:
    int[] FIRST_DIGIT_ENCODINGS -> a
    int[] decodeMiddleCounters -> f
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> b
    void determineFirstDigit(java.lang.StringBuilder,int) -> a
com.google.zxing.oned.EAN13Writer -> com.google.zxing.e.i:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    boolean[] encode(java.lang.String) -> a
com.google.zxing.oned.EAN8Reader -> com.google.zxing.e.j:
    int[] decodeMiddleCounters -> a
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> b
com.google.zxing.oned.EAN8Writer -> com.google.zxing.e.k:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    boolean[] encode(java.lang.String) -> a
com.google.zxing.oned.EANManufacturerOrgSupport -> com.google.zxing.e.l:
    java.util.List ranges -> a
    java.util.List countryIdentifiers -> b
    java.lang.String lookupCountryIdentifier(java.lang.String) -> a
    void add(int[],java.lang.String) -> a
    void initIfNeeded() -> a
com.google.zxing.oned.ITFReader -> com.google.zxing.e.m:
    int[] DEFAULT_ALLOWED_LENGTHS -> b
    int narrowLineWidth -> c
    int[] START_PATTERN -> d
    int[] END_PATTERN_REVERSED -> e
    int[][] PATTERNS -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void decodeMiddle(com.google.zxing.common.BitArray,int,int,java.lang.StringBuilder) -> a
    int[] decodeStart(com.google.zxing.common.BitArray) -> a
    void validateQuietZone(com.google.zxing.common.BitArray,int) -> a
    int skipWhiteSpace(com.google.zxing.common.BitArray) -> c
    int[] decodeEnd(com.google.zxing.common.BitArray) -> b
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,int[]) -> c
    int decodeDigit(int[]) -> a
com.google.zxing.oned.ITFWriter -> com.google.zxing.e.n:
    int[] START_PATTERN -> a
    int[] END_PATTERN -> b
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    boolean[] encode(java.lang.String) -> a
com.google.zxing.oned.MultiFormatOneDReader -> com.google.zxing.e.o:
    com.google.zxing.oned.OneDReader[] readers -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void reset() -> a
com.google.zxing.oned.MultiFormatUPCEANReader -> com.google.zxing.e.p:
    com.google.zxing.oned.UPCEANReader[] readers -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void reset() -> a
com.google.zxing.oned.OneDReader -> com.google.zxing.e.q:
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
    com.google.zxing.Result doDecode(com.google.zxing.BinaryBitmap,java.util.Map) -> b
    void recordPattern(com.google.zxing.common.BitArray,int,int[]) -> a
    void recordPatternInReverse(com.google.zxing.common.BitArray,int,int[]) -> b
    int patternMatchVariance(int[],int[],int) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
com.google.zxing.oned.OneDimensionalCodeWriter -> com.google.zxing.e.r:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    com.google.zxing.common.BitMatrix renderResult(boolean[],int,int,int) -> a
    int appendPattern(boolean[],int,int[],boolean) -> a
    int getDefaultMargin() -> a
    boolean[] encode(java.lang.String) -> a
com.google.zxing.oned.UPCAReader -> com.google.zxing.e.s:
    com.google.zxing.oned.UPCEANReader ean13Reader -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[],java.util.Map) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> b
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    com.google.zxing.Result maybeReturnResult(com.google.zxing.Result) -> a
com.google.zxing.oned.UPCAWriter -> com.google.zxing.e.t:
    com.google.zxing.oned.EAN13Writer subWriter -> a
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    java.lang.String preencode(java.lang.String) -> a
com.google.zxing.oned.UPCEANExtension2Support -> com.google.zxing.e.u:
    int[] decodeMiddleCounters -> a
    java.lang.StringBuilder decodeRowStringBuffer -> b
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[]) -> a
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    java.util.Map parseExtensionString(java.lang.String) -> a
com.google.zxing.oned.UPCEANExtension5Support -> com.google.zxing.e.v:
    int[] CHECK_DIGIT_ENCODINGS -> a
    int[] decodeMiddleCounters -> b
    java.lang.StringBuilder decodeRowStringBuffer -> c
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[]) -> a
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    int extensionChecksum(java.lang.CharSequence) -> a
    int determineCheckDigit(int) -> a
    java.util.Map parseExtensionString(java.lang.String) -> a
    java.lang.String parseExtension5String(java.lang.String) -> b
com.google.zxing.oned.UPCEANExtensionSupport -> com.google.zxing.e.w:
    int[] EXTENSION_START_PATTERN -> a
    com.google.zxing.oned.UPCEANExtension2Support twoSupport -> b
    com.google.zxing.oned.UPCEANExtension5Support fiveSupport -> c
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int) -> a
com.google.zxing.oned.UPCEANReader -> com.google.zxing.e.x:
    int[] START_END_PATTERN -> b
    int[] MIDDLE_PATTERN -> c
    int[][] L_PATTERNS -> d
    int[][] L_AND_G_PATTERNS -> e
    java.lang.StringBuilder decodeRowStringBuffer -> a
    com.google.zxing.oned.UPCEANExtensionSupport extensionReader -> f
    com.google.zxing.oned.EANManufacturerOrgSupport eanManSupport -> g
    int[] findStartGuardPattern(com.google.zxing.common.BitArray) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,int[],java.util.Map) -> a
    boolean checkChecksum(java.lang.String) -> a
    boolean checkStandardUPCEANChecksum(java.lang.CharSequence) -> a
    int[] decodeEnd(com.google.zxing.common.BitArray,int) -> a
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,boolean,int[]) -> a
    int[] findGuardPattern(com.google.zxing.common.BitArray,int,boolean,int[],int[]) -> a
    int decodeDigit(com.google.zxing.common.BitArray,int[],int,int[][]) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> b
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
com.google.zxing.oned.UPCEANWriter -> com.google.zxing.e.y:
    int getDefaultMargin() -> a
com.google.zxing.oned.UPCEReader -> com.google.zxing.e.z:
    int[] MIDDLE_END_PATTERN -> a
    int[][] NUMSYS_AND_CHECK_DIGIT_PATTERNS -> f
    int[] decodeMiddleCounters -> g
    int decodeMiddle(com.google.zxing.common.BitArray,int[],java.lang.StringBuilder) -> a
    int[] decodeEnd(com.google.zxing.common.BitArray,int) -> a
    boolean checkChecksum(java.lang.String) -> a
    void determineNumSysAndCheckDigit(java.lang.StringBuilder,int) -> a
    com.google.zxing.BarcodeFormat getBarcodeFormat() -> b
    java.lang.String convertUPCEtoUPCA(java.lang.String) -> b
com.google.zxing.oned.rss.AbstractRSSReader -> com.google.zxing.e.a.a:
    int[] decodeFinderCounters -> a
    int[] dataCharacterCounters -> b
    float[] oddRoundingErrors -> c
    float[] evenRoundingErrors -> d
    int[] oddCounts -> e
    int[] evenCounts -> f
    int[] getDecodeFinderCounters() -> b
    int[] getDataCharacterCounters() -> c
    float[] getOddRoundingErrors() -> d
    float[] getEvenRoundingErrors() -> e
    int[] getOddCounts() -> f
    int[] getEvenCounts() -> g
    int parseFinderValue(int[],int[][]) -> a
    int count(int[]) -> a
    void increment(int[],float[]) -> a
    void decrement(int[],float[]) -> b
    boolean isFinderPattern(int[]) -> b
com.google.zxing.oned.rss.DataCharacter -> com.google.zxing.e.a.b:
    int value -> a
    int checksumPortion -> b
    int getValue() -> a
    int getChecksumPortion() -> b
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.zxing.oned.rss.FinderPattern -> com.google.zxing.e.a.c:
    int value -> a
    int[] startEnd -> b
    com.google.zxing.ResultPoint[] resultPoints -> c
    int getValue() -> a
    int[] getStartEnd() -> b
    com.google.zxing.ResultPoint[] getResultPoints() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.zxing.oned.rss.Pair -> com.google.zxing.e.a.d:
    com.google.zxing.oned.rss.FinderPattern finderPattern -> a
    int count -> b
    com.google.zxing.oned.rss.FinderPattern getFinderPattern() -> c
    int getCount() -> d
    void incrementCount() -> e
com.google.zxing.oned.rss.RSS14Reader -> com.google.zxing.e.a.e:
    int[] OUTSIDE_EVEN_TOTAL_SUBSET -> a
    int[] INSIDE_ODD_TOTAL_SUBSET -> b
    int[] OUTSIDE_GSUM -> c
    int[] INSIDE_GSUM -> d
    int[] OUTSIDE_ODD_WIDEST -> e
    int[] INSIDE_ODD_WIDEST -> f
    int[][] FINDER_PATTERNS -> g
    java.util.List possibleLeftPairs -> h
    java.util.List possibleRightPairs -> i
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void addOrTally(java.util.Collection,com.google.zxing.oned.rss.Pair) -> a
    void reset() -> a
    com.google.zxing.Result constructResult(com.google.zxing.oned.rss.Pair,com.google.zxing.oned.rss.Pair) -> a
    boolean checkChecksum(com.google.zxing.oned.rss.Pair,com.google.zxing.oned.rss.Pair) -> b
    com.google.zxing.oned.rss.Pair decodePair(com.google.zxing.common.BitArray,boolean,int,java.util.Map) -> a
    com.google.zxing.oned.rss.DataCharacter decodeDataCharacter(com.google.zxing.common.BitArray,com.google.zxing.oned.rss.FinderPattern,boolean) -> a
    int[] findFinderPattern(com.google.zxing.common.BitArray,int,boolean) -> a
    com.google.zxing.oned.rss.FinderPattern parseFoundFinderPattern(com.google.zxing.common.BitArray,int,boolean,int[]) -> a
    void adjustOddEvenCounts(boolean,int) -> a
com.google.zxing.oned.rss.RSSUtils -> com.google.zxing.e.a.f:
    int getRSSvalue(int[],int,boolean) -> a
    int combins(int,int) -> a
com.google.zxing.oned.rss.expanded.BitArrayBuilder -> com.google.zxing.e.a.a.a:
    com.google.zxing.common.BitArray buildBitArray(java.util.List) -> a
com.google.zxing.oned.rss.expanded.ExpandedPair -> com.google.zxing.e.a.a.b:
    boolean mayBeLast -> a
    com.google.zxing.oned.rss.DataCharacter leftChar -> b
    com.google.zxing.oned.rss.DataCharacter rightChar -> c
    com.google.zxing.oned.rss.FinderPattern finderPattern -> d
    com.google.zxing.oned.rss.DataCharacter getLeftChar() -> a
    com.google.zxing.oned.rss.DataCharacter getRightChar() -> b
    com.google.zxing.oned.rss.FinderPattern getFinderPattern() -> c
    boolean mustBeLast() -> d
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    boolean equalsOrNull(java.lang.Object,java.lang.Object) -> a
    int hashCode() -> hashCode
    int hashNotNull(java.lang.Object) -> a
com.google.zxing.oned.rss.expanded.ExpandedRow -> com.google.zxing.e.a.a.c:
    java.util.List pairs -> a
    int rowNumber -> b
    boolean wasReversed -> c
    java.util.List getPairs() -> a
    int getRowNumber() -> b
    boolean isEquivalent(java.util.List) -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.google.zxing.oned.rss.expanded.RSSExpandedReader -> com.google.zxing.e.a.a.d:
    int[] SYMBOL_WIDEST -> a
    int[] EVEN_TOTAL_SUBSET -> b
    int[] GSUM -> c
    int[][] FINDER_PATTERNS -> d
    int[][] WEIGHTS -> e
    int[][] FINDER_PATTERN_SEQUENCES -> f
    java.util.List pairs -> g
    java.util.List rows -> h
    int[] startEnd -> i
    boolean startFromEven -> j
    com.google.zxing.Result decodeRow(int,com.google.zxing.common.BitArray,java.util.Map) -> a
    void reset() -> a
    java.util.List decodeRow2pairs(int,com.google.zxing.common.BitArray) -> a
    java.util.List checkRows(boolean) -> a
    java.util.List checkRows(java.util.List,int) -> a
    boolean isValidSequence(java.util.List) -> b
    void storeRow(int,boolean) -> a
    void removePartialRows(java.util.List,java.util.List) -> a
    boolean isPartialRow(java.lang.Iterable,java.lang.Iterable) -> a
    com.google.zxing.Result constructResult(java.util.List) -> a
    boolean checkChecksum() -> h
    int getNextSecondBar(com.google.zxing.common.BitArray,int) -> a
    com.google.zxing.oned.rss.expanded.ExpandedPair retrieveNextPair(com.google.zxing.common.BitArray,java.util.List,int) -> a
    void findNextPair(com.google.zxing.common.BitArray,java.util.List,int) -> b
    void reverseCounters(int[]) -> c
    com.google.zxing.oned.rss.FinderPattern parseFoundFinderPattern(com.google.zxing.common.BitArray,int,boolean) -> a
    com.google.zxing.oned.rss.DataCharacter decodeDataCharacter(com.google.zxing.common.BitArray,com.google.zxing.oned.rss.FinderPattern,boolean,boolean) -> a
    boolean isNotA1left(com.google.zxing.oned.rss.FinderPattern,boolean,boolean) -> a
    void adjustOddEvenCounts(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI013103decoder -> com.google.zxing.e.a.a.a.a:
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI01320xDecoder -> com.google.zxing.e.a.a.a.b:
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI01392xDecoder -> com.google.zxing.e.a.a.a.c:
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI01393xDecoder -> com.google.zxing.e.a.a.a.d:
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI013x0x1xDecoder -> com.google.zxing.e.a.a.a.e:
    java.lang.String dateCode -> a
    java.lang.String firstAIdigits -> b
    java.lang.String parseInformation() -> a
    void encodeCompressedDate(java.lang.StringBuilder,int) -> c
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI013x0xDecoder -> com.google.zxing.e.a.a.a.f:
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI01AndOtherAIs -> com.google.zxing.e.a.a.a.g:
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.AI01decoder -> com.google.zxing.e.a.a.a.h:
    void encodeCompressedGtin(java.lang.StringBuilder,int) -> b
    void encodeCompressedGtinWithoutAI(java.lang.StringBuilder,int,int) -> a
    void appendCheckDigit(java.lang.StringBuilder,int) -> a
com.google.zxing.oned.rss.expanded.decoders.AI01weightDecoder -> com.google.zxing.e.a.a.a.i:
    void encodeCompressedWeight(java.lang.StringBuilder,int,int) -> b
    void addWeightCode(java.lang.StringBuilder,int) -> a
    int checkWeight(int) -> a
com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder -> com.google.zxing.e.a.a.a.j:
    com.google.zxing.common.BitArray information -> a
    com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder generalDecoder -> b
    com.google.zxing.common.BitArray getInformation() -> b
    com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder getGeneralDecoder() -> c
    java.lang.String parseInformation() -> a
    com.google.zxing.oned.rss.expanded.decoders.AbstractExpandedDecoder createDecoder(com.google.zxing.common.BitArray) -> a
com.google.zxing.oned.rss.expanded.decoders.AnyAIDecoder -> com.google.zxing.e.a.a.a.k:
    java.lang.String parseInformation() -> a
com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult -> com.google.zxing.e.a.a.a.l:
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation decodedInformation -> a
    boolean finished -> b
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation getDecodedInformation() -> a
    boolean isFinished() -> b
com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState -> com.google.zxing.e.a.a.a.m:
    int position -> a
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State encoding -> b
    int getPosition() -> a
    void setPosition(int) -> a
    void incrementPosition(int) -> b
    boolean isAlpha() -> b
    boolean isIsoIec646() -> c
    void setNumeric() -> d
    void setAlpha() -> e
    void setIsoIec646() -> f
com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State -> com.google.zxing.e.a.a.a.n:
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State NUMERIC -> a
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State ALPHA -> b
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State ISO_IEC_646 -> c
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State[] $VALUES -> d
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State[] values() -> values
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState$State valueOf(java.lang.String) -> valueOf
com.google.zxing.oned.rss.expanded.decoders.DecodedChar -> com.google.zxing.e.a.a.a.o:
    char value -> a
    char getValue() -> a
    boolean isFNC1() -> b
com.google.zxing.oned.rss.expanded.decoders.DecodedInformation -> com.google.zxing.e.a.a.a.p:
    java.lang.String newString -> a
    int remainingValue -> b
    boolean remaining -> c
    java.lang.String getNewString() -> a
    boolean isRemaining() -> b
    int getRemainingValue() -> c
com.google.zxing.oned.rss.expanded.decoders.DecodedNumeric -> com.google.zxing.e.a.a.a.q:
    int firstDigit -> a
    int secondDigit -> b
    int getFirstDigit() -> a
    int getSecondDigit() -> b
    boolean isFirstDigitFNC1() -> c
    boolean isSecondDigitFNC1() -> d
com.google.zxing.oned.rss.expanded.decoders.DecodedObject -> com.google.zxing.e.a.a.a.r:
    int newPosition -> a
    int getNewPosition() -> e
com.google.zxing.oned.rss.expanded.decoders.FieldParser -> com.google.zxing.e.a.a.a.s:
    java.lang.Object VARIABLE_LENGTH -> a
    java.lang.Object[][] TWO_DIGIT_DATA_LENGTH -> b
    java.lang.Object[][] THREE_DIGIT_DATA_LENGTH -> c
    java.lang.Object[][] THREE_DIGIT_PLUS_DIGIT_DATA_LENGTH -> d
    java.lang.Object[][] FOUR_DIGIT_DATA_LENGTH -> e
    java.lang.String parseFieldsInGeneralPurpose(java.lang.String) -> a
    java.lang.String processFixedAI(int,int,java.lang.String) -> a
    java.lang.String processVariableAI(int,int,java.lang.String) -> b
com.google.zxing.oned.rss.expanded.decoders.GeneralAppIdDecoder -> com.google.zxing.e.a.a.a.t:
    com.google.zxing.common.BitArray information -> a
    com.google.zxing.oned.rss.expanded.decoders.CurrentParsingState current -> b
    java.lang.StringBuilder buffer -> c
    java.lang.String decodeAllCodes(java.lang.StringBuilder,int) -> a
    boolean isStillNumeric(int) -> a
    com.google.zxing.oned.rss.expanded.decoders.DecodedNumeric decodeNumeric(int) -> b
    int extractNumericValueFromBitArray(int,int) -> a
    int extractNumericValueFromBitArray(com.google.zxing.common.BitArray,int,int) -> a
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation decodeGeneralPurposeField(int,java.lang.String) -> a
    com.google.zxing.oned.rss.expanded.decoders.DecodedInformation parseBlocks() -> a
    com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult parseNumericBlock() -> b
    com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult parseIsoIec646Block() -> c
    com.google.zxing.oned.rss.expanded.decoders.BlockParsedResult parseAlphaBlock() -> d
    boolean isStillIsoIec646(int) -> c
    com.google.zxing.oned.rss.expanded.decoders.DecodedChar decodeIsoIec646(int) -> d
    boolean isStillAlpha(int) -> e
    com.google.zxing.oned.rss.expanded.decoders.DecodedChar decodeAlphanumeric(int) -> f
    boolean isAlphaTo646ToAlphaLatch(int) -> g
    boolean isAlphaOr646ToNumericLatch(int) -> h
    boolean isNumericToAlphaNumericLatch(int) -> i
com.google.zxing.pdf417.PDF417Reader -> com.google.zxing.f.a:
    com.google.zxing.ResultPoint[] NO_POINTS -> a
    com.google.zxing.pdf417.decoder.Decoder decoder -> b
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
    com.google.zxing.common.BitMatrix extractPureBits(com.google.zxing.common.BitMatrix) -> a
    int moduleSize(int[],com.google.zxing.common.BitMatrix) -> a
    int findPatternStart(int,int,com.google.zxing.common.BitMatrix) -> a
    int findPatternEnd(int,int,com.google.zxing.common.BitMatrix) -> b
com.google.zxing.pdf417.decoder.BitMatrixParser -> com.google.zxing.f.a.a:
    int[] NO_ERRORS -> a
    com.google.zxing.common.BitMatrix bitMatrix -> b
    int rows -> c
    int leftColumnECData -> d
    int rightColumnECData -> e
    int eraseCount -> f
    int[] erasures -> g
    int ecLevel -> h
    int[] SYMBOL_TABLE -> i
    int[] CODEWORD_TABLE -> j
    int[] readCodewords() -> a
    int[] trimArray(int[],int) -> a
    int processRow(int[],int,int,int[],int) -> a
    int getCodeword(long) -> a
    int findCodewordIndex(long) -> b
    int[] getErasures() -> b
    int getECLevel() -> c
com.google.zxing.pdf417.decoder.DecodedBitStreamParser -> com.google.zxing.f.a.b:
    char[] PUNCT_CHARS -> a
    char[] MIXED_CHARS -> b
    java.math.BigInteger[] EXP900 -> c
    com.google.zxing.common.DecoderResult decode(int[]) -> a
    int textCompaction(int[],int,java.lang.StringBuilder) -> a
    void decodeTextCompaction(int[],int[],int,java.lang.StringBuilder) -> a
    int byteCompaction(int,int[],int,java.lang.StringBuilder) -> a
    int numericCompaction(int[],int,java.lang.StringBuilder) -> b
    java.lang.String decodeBase900toBase10(int[],int) -> a
com.google.zxing.pdf417.decoder.DecodedBitStreamParser$1 -> com.google.zxing.f.a.c:
    int[] $SwitchMap$com$google$zxing$pdf417$decoder$DecodedBitStreamParser$Mode -> a
com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode -> com.google.zxing.f.a.d:
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode ALPHA -> a
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode LOWER -> b
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode MIXED -> c
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode PUNCT -> d
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode ALPHA_SHIFT -> e
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode PUNCT_SHIFT -> f
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode[] $VALUES -> g
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode[] values() -> values
    com.google.zxing.pdf417.decoder.DecodedBitStreamParser$Mode valueOf(java.lang.String) -> valueOf
com.google.zxing.pdf417.decoder.Decoder -> com.google.zxing.f.a.e:
    com.google.zxing.pdf417.decoder.ec.ErrorCorrection errorCorrection -> a
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix) -> a
    void verifyCodewordCount(int[],int) -> a
    void correctErrors(int[],int[],int) -> a
com.google.zxing.pdf417.decoder.ec.ErrorCorrection -> com.google.zxing.f.a.a.a:
    com.google.zxing.pdf417.decoder.ec.ModulusGF field -> a
    void decode(int[],int,int[]) -> a
    com.google.zxing.pdf417.decoder.ec.ModulusPoly[] runEuclideanAlgorithm(com.google.zxing.pdf417.decoder.ec.ModulusPoly,com.google.zxing.pdf417.decoder.ec.ModulusPoly,int) -> a
    int[] findErrorLocations(com.google.zxing.pdf417.decoder.ec.ModulusPoly) -> a
    int[] findErrorMagnitudes(com.google.zxing.pdf417.decoder.ec.ModulusPoly,com.google.zxing.pdf417.decoder.ec.ModulusPoly,int[]) -> a
com.google.zxing.pdf417.decoder.ec.ModulusGF -> com.google.zxing.f.a.a.b:
    com.google.zxing.pdf417.decoder.ec.ModulusGF PDF417_GF -> a
    int[] expTable -> b
    int[] logTable -> c
    com.google.zxing.pdf417.decoder.ec.ModulusPoly zero -> d
    com.google.zxing.pdf417.decoder.ec.ModulusPoly one -> e
    int modulus -> f
    com.google.zxing.pdf417.decoder.ec.ModulusPoly getZero() -> a
    com.google.zxing.pdf417.decoder.ec.ModulusPoly getOne() -> b
    com.google.zxing.pdf417.decoder.ec.ModulusPoly buildMonomial(int,int) -> a
    int add(int,int) -> b
    int subtract(int,int) -> c
    int exp(int) -> a
    int log(int) -> b
    int inverse(int) -> c
    int multiply(int,int) -> d
    int getSize() -> c
com.google.zxing.pdf417.decoder.ec.ModulusPoly -> com.google.zxing.f.a.a.c:
    com.google.zxing.pdf417.decoder.ec.ModulusGF field -> a
    int[] coefficients -> b
    int getDegree() -> a
    boolean isZero() -> b
    int getCoefficient(int) -> a
    int evaluateAt(int) -> b
    com.google.zxing.pdf417.decoder.ec.ModulusPoly add(com.google.zxing.pdf417.decoder.ec.ModulusPoly) -> a
    com.google.zxing.pdf417.decoder.ec.ModulusPoly subtract(com.google.zxing.pdf417.decoder.ec.ModulusPoly) -> b
    com.google.zxing.pdf417.decoder.ec.ModulusPoly multiply(com.google.zxing.pdf417.decoder.ec.ModulusPoly) -> c
    com.google.zxing.pdf417.decoder.ec.ModulusPoly negative() -> c
    com.google.zxing.pdf417.decoder.ec.ModulusPoly multiply(int) -> c
    com.google.zxing.pdf417.decoder.ec.ModulusPoly multiplyByMonomial(int,int) -> a
    java.lang.String toString() -> toString
com.google.zxing.pdf417.detector.Detector -> com.google.zxing.f.b.a:
    int[] START_PATTERN -> a
    int[] START_PATTERN_REVERSE -> b
    int[] STOP_PATTERN -> c
    int[] STOP_PATTERN_REVERSE -> d
    com.google.zxing.BinaryBitmap image -> e
    com.google.zxing.common.DetectorResult detect() -> a
    com.google.zxing.common.DetectorResult detect(java.util.Map) -> a
    com.google.zxing.ResultPoint[] findVertices(com.google.zxing.common.BitMatrix,boolean) -> a
    com.google.zxing.ResultPoint[] findVertices180(com.google.zxing.common.BitMatrix,boolean) -> b
    void correctCodeWordVertices(com.google.zxing.ResultPoint[],boolean) -> a
    float computeModuleWidth(com.google.zxing.ResultPoint[]) -> a
    int computeDimension(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,float) -> a
    int computeYDimension(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,float) -> b
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int,int) -> a
    int[] findGuardPattern(com.google.zxing.common.BitMatrix,int,int,int,boolean,int[],int[]) -> a
    int patternMatchVariance(int[],int[],int) -> a
com.google.zxing.pdf417.encoder.BarcodeMatrix -> com.google.zxing.f.c.a:
    com.google.zxing.pdf417.encoder.BarcodeRow[] matrix -> a
    int currentRow -> b
    int height -> c
    int width -> d
    void startRow() -> a
    com.google.zxing.pdf417.encoder.BarcodeRow getCurrentRow() -> b
    byte[][] getScaledMatrix(int,int) -> a
com.google.zxing.pdf417.encoder.BarcodeRow -> com.google.zxing.f.c.b:
    byte[] row -> a
    int currentLocation -> b
    void set(int,boolean) -> a
    void addBar(boolean,int) -> a
    byte[] getScaledRow(int) -> a
com.google.zxing.pdf417.encoder.Compaction -> com.google.zxing.f.c.c:
    com.google.zxing.pdf417.encoder.Compaction AUTO -> a
    com.google.zxing.pdf417.encoder.Compaction TEXT -> b
    com.google.zxing.pdf417.encoder.Compaction BYTE -> c
    com.google.zxing.pdf417.encoder.Compaction NUMERIC -> d
    com.google.zxing.pdf417.encoder.Compaction[] $VALUES -> e
    com.google.zxing.pdf417.encoder.Compaction[] values() -> values
    com.google.zxing.pdf417.encoder.Compaction valueOf(java.lang.String) -> valueOf
com.google.zxing.pdf417.encoder.Dimensions -> com.google.zxing.f.c.d:
    int minCols -> a
    int maxCols -> b
    int minRows -> c
    int maxRows -> d
    int getMinCols() -> a
    int getMaxCols() -> b
    int getMinRows() -> c
    int getMaxRows() -> d
com.google.zxing.pdf417.encoder.PDF417 -> com.google.zxing.f.c.e:
    int[][] CODEWORD_TABLE -> a
    com.google.zxing.pdf417.encoder.BarcodeMatrix barcodeMatrix -> b
    boolean compact -> c
    com.google.zxing.pdf417.encoder.Compaction compaction -> d
    int minCols -> e
    int maxCols -> f
    int maxRows -> g
    int minRows -> h
    com.google.zxing.pdf417.encoder.BarcodeMatrix getBarcodeMatrix() -> a
    int calculateNumberOfRows(int,int,int) -> a
    int getNumberOfPadCodewords(int,int,int,int) -> b
    void encodeChar(int,int,com.google.zxing.pdf417.encoder.BarcodeRow) -> a
    void encodeLowLevel(java.lang.CharSequence,int,int,int,com.google.zxing.pdf417.encoder.BarcodeMatrix) -> a
    void generateBarcodeLogic(java.lang.String,int) -> a
    int[] determineDimensions(int,int) -> a
    void setDimensions(int,int,int,int) -> a
    void setCompaction(com.google.zxing.pdf417.encoder.Compaction) -> a
    void setCompact(boolean) -> a
com.google.zxing.pdf417.encoder.PDF417ErrorCorrection -> com.google.zxing.f.c.f:
    int[][] EC_COEFFICIENTS -> a
    int getErrorCorrectionCodewordCount(int) -> a
    java.lang.String generateErrorCorrection(java.lang.CharSequence,int) -> a
com.google.zxing.pdf417.encoder.PDF417HighLevelEncoder -> com.google.zxing.f.c.g:
    byte[] TEXT_MIXED_RAW -> a
    byte[] TEXT_PUNCTUATION_RAW -> b
    byte[] MIXED -> c
    byte[] PUNCTUATION -> d
    byte[] getBytesForMessage(java.lang.String) -> a
    java.lang.String encodeHighLevel(java.lang.String,com.google.zxing.pdf417.encoder.Compaction) -> a
    int encodeText(java.lang.CharSequence,int,int,java.lang.StringBuilder,int) -> a
    void encodeBinary(byte[],int,int,int,java.lang.StringBuilder) -> a
    void encodeNumeric(java.lang.String,int,int,java.lang.StringBuilder) -> a
    boolean isDigit(char) -> a
    boolean isAlphaUpper(char) -> b
    boolean isAlphaLower(char) -> c
    boolean isMixed(char) -> d
    boolean isPunctuation(char) -> e
    boolean isText(char) -> f
    int determineConsecutiveDigitCount(java.lang.CharSequence,int) -> a
    int determineConsecutiveTextCount(java.lang.CharSequence,int) -> b
    int determineConsecutiveBinaryCount(java.lang.CharSequence,byte[],int) -> a
com.google.zxing.pdf417.encoder.PDF417Writer -> com.google.zxing.f.c.h:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    com.google.zxing.common.BitMatrix bitMatrixFromEncoder(com.google.zxing.pdf417.encoder.PDF417,java.lang.String,int,int) -> a
    com.google.zxing.common.BitMatrix bitMatrixFrombitArray(byte[][]) -> a
    byte[][] rotateArray(byte[][]) -> b
com.google.zxing.qrcode.QRCodeReader -> com.google.zxing.g.a:
    com.google.zxing.ResultPoint[] NO_POINTS -> a
    com.google.zxing.qrcode.decoder.Decoder decoder -> b
    com.google.zxing.Result decode(com.google.zxing.BinaryBitmap,java.util.Map) -> a
    void reset() -> a
    com.google.zxing.common.BitMatrix extractPureBits(com.google.zxing.common.BitMatrix) -> a
    float moduleSize(int[],com.google.zxing.common.BitMatrix) -> a
com.google.zxing.qrcode.QRCodeWriter -> com.google.zxing.g.b:
    com.google.zxing.common.BitMatrix encode(java.lang.String,com.google.zxing.BarcodeFormat,int,int,java.util.Map) -> a
    com.google.zxing.common.BitMatrix renderResult(com.google.zxing.qrcode.encoder.QRCode,int,int,int) -> a
com.google.zxing.qrcode.decoder.BitMatrixParser -> com.google.zxing.g.a.a:
    com.google.zxing.common.BitMatrix bitMatrix -> a
    com.google.zxing.qrcode.decoder.Version parsedVersion -> b
    com.google.zxing.qrcode.decoder.FormatInformation parsedFormatInfo -> c
    com.google.zxing.qrcode.decoder.FormatInformation readFormatInformation() -> a
    com.google.zxing.qrcode.decoder.Version readVersion() -> b
    int copyBit(int,int,int) -> a
    byte[] readCodewords() -> c
com.google.zxing.qrcode.decoder.DataBlock -> com.google.zxing.g.a.b:
    int numDataCodewords -> a
    byte[] codewords -> b
    com.google.zxing.qrcode.decoder.DataBlock[] getDataBlocks(byte[],com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    int getNumDataCodewords() -> a
    byte[] getCodewords() -> b
com.google.zxing.qrcode.decoder.DataMask -> com.google.zxing.g.a.c:
    com.google.zxing.qrcode.decoder.DataMask[] DATA_MASKS -> a
    void unmaskBitMatrix(com.google.zxing.common.BitMatrix,int) -> a
    boolean isMasked(int,int) -> a
    com.google.zxing.qrcode.decoder.DataMask forReference(int) -> a
com.google.zxing.qrcode.decoder.DataMask$1 -> com.google.zxing.g.a.d:
com.google.zxing.qrcode.decoder.DataMask$DataMask000 -> com.google.zxing.g.a.e:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask001 -> com.google.zxing.g.a.f:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask010 -> com.google.zxing.g.a.g:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask011 -> com.google.zxing.g.a.h:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask100 -> com.google.zxing.g.a.i:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask101 -> com.google.zxing.g.a.j:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask110 -> com.google.zxing.g.a.k:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DataMask$DataMask111 -> com.google.zxing.g.a.l:
    boolean isMasked(int,int) -> a
com.google.zxing.qrcode.decoder.DecodedBitStreamParser -> com.google.zxing.g.a.m:
    char[] ALPHANUMERIC_CHARS -> a
    com.google.zxing.common.DecoderResult decode(byte[],com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,java.util.Map) -> a
    void decodeHanziSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int) -> a
    void decodeKanjiSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int) -> b
    void decodeByteSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int,com.google.zxing.common.CharacterSetECI,java.util.Collection,java.util.Map) -> a
    char toAlphaNumericChar(int) -> a
    void decodeAlphanumericSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int,boolean) -> a
    void decodeNumericSegment(com.google.zxing.common.BitSource,java.lang.StringBuilder,int) -> c
    int parseECIValue(com.google.zxing.common.BitSource) -> a
com.google.zxing.qrcode.decoder.Decoder -> com.google.zxing.g.a.n:
    com.google.zxing.common.reedsolomon.ReedSolomonDecoder rsDecoder -> a
    com.google.zxing.common.DecoderResult decode(com.google.zxing.common.BitMatrix,java.util.Map) -> a
    void correctErrors(byte[],int) -> a
com.google.zxing.qrcode.decoder.ErrorCorrectionLevel -> com.google.zxing.g.a.o:
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel L -> a
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel M -> b
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel Q -> c
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel H -> d
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel[] FOR_BITS -> e
    int bits -> f
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel[] $VALUES -> g
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel[] values() -> values
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel valueOf(java.lang.String) -> valueOf
    int getBits() -> a
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel forBits(int) -> a
com.google.zxing.qrcode.decoder.FormatInformation -> com.google.zxing.g.a.p:
    int[][] FORMAT_INFO_DECODE_LOOKUP -> a
    int[] BITS_SET_IN_HALF_BYTE -> b
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel errorCorrectionLevel -> c
    byte dataMask -> d
    int numBitsDiffering(int,int) -> a
    com.google.zxing.qrcode.decoder.FormatInformation decodeFormatInformation(int,int) -> b
    com.google.zxing.qrcode.decoder.FormatInformation doDecodeFormatInformation(int,int) -> c
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel getErrorCorrectionLevel() -> a
    byte getDataMask() -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
com.google.zxing.qrcode.decoder.Mode -> com.google.zxing.g.a.q:
    com.google.zxing.qrcode.decoder.Mode TERMINATOR -> a
    com.google.zxing.qrcode.decoder.Mode NUMERIC -> b
    com.google.zxing.qrcode.decoder.Mode ALPHANUMERIC -> c
    com.google.zxing.qrcode.decoder.Mode STRUCTURED_APPEND -> d
    com.google.zxing.qrcode.decoder.Mode BYTE -> e
    com.google.zxing.qrcode.decoder.Mode ECI -> f
    com.google.zxing.qrcode.decoder.Mode KANJI -> g
    com.google.zxing.qrcode.decoder.Mode FNC1_FIRST_POSITION -> h
    com.google.zxing.qrcode.decoder.Mode FNC1_SECOND_POSITION -> i
    com.google.zxing.qrcode.decoder.Mode HANZI -> j
    int[] characterCountBitsForVersions -> k
    int bits -> l
    com.google.zxing.qrcode.decoder.Mode[] $VALUES -> m
    com.google.zxing.qrcode.decoder.Mode[] values() -> values
    com.google.zxing.qrcode.decoder.Mode valueOf(java.lang.String) -> valueOf
    com.google.zxing.qrcode.decoder.Mode forBits(int) -> a
    int getCharacterCountBits(com.google.zxing.qrcode.decoder.Version) -> a
    int getBits() -> a
com.google.zxing.qrcode.decoder.Version -> com.google.zxing.g.a.r:
    int[] VERSION_DECODE_INFO -> a
    com.google.zxing.qrcode.decoder.Version[] VERSIONS -> b
    int versionNumber -> c
    int[] alignmentPatternCenters -> d
    com.google.zxing.qrcode.decoder.Version$ECBlocks[] ecBlocks -> e
    int totalCodewords -> f
    int getVersionNumber() -> a
    int[] getAlignmentPatternCenters() -> b
    int getTotalCodewords() -> c
    int getDimensionForVersion() -> d
    com.google.zxing.qrcode.decoder.Version$ECBlocks getECBlocksForLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    com.google.zxing.qrcode.decoder.Version getProvisionalVersionForDimension(int) -> a
    com.google.zxing.qrcode.decoder.Version getVersionForNumber(int) -> b
    com.google.zxing.qrcode.decoder.Version decodeVersionInformation(int) -> c
    com.google.zxing.common.BitMatrix buildFunctionPattern() -> e
    java.lang.String toString() -> toString
    com.google.zxing.qrcode.decoder.Version[] buildVersions() -> f
com.google.zxing.qrcode.decoder.Version$ECB -> com.google.zxing.g.a.s:
    int count -> a
    int dataCodewords -> b
    int getCount() -> a
    int getDataCodewords() -> b
com.google.zxing.qrcode.decoder.Version$ECBlocks -> com.google.zxing.g.a.t:
    int ecCodewordsPerBlock -> a
    com.google.zxing.qrcode.decoder.Version$ECB[] ecBlocks -> b
    int getECCodewordsPerBlock() -> a
    int getNumBlocks() -> b
    int getTotalECCodewords() -> c
    com.google.zxing.qrcode.decoder.Version$ECB[] getECBlocks() -> d
com.google.zxing.qrcode.detector.AlignmentPattern -> com.google.zxing.g.b.a:
    float estimatedModuleSize -> a
    boolean aboutEquals(float,float,float) -> a
    com.google.zxing.qrcode.detector.AlignmentPattern combineEstimate(float,float,float) -> b
com.google.zxing.qrcode.detector.AlignmentPatternFinder -> com.google.zxing.g.b.b:
    com.google.zxing.common.BitMatrix image -> a
    java.util.List possibleCenters -> b
    int startX -> c
    int startY -> d
    int width -> e
    int height -> f
    float moduleSize -> g
    int[] crossCheckStateCount -> h
    com.google.zxing.ResultPointCallback resultPointCallback -> i
    com.google.zxing.qrcode.detector.AlignmentPattern find() -> a
    float centerFromEnd(int[],int) -> a
    boolean foundPatternCross(int[]) -> a
    float crossCheckVertical(int,int,int,int) -> a
    com.google.zxing.qrcode.detector.AlignmentPattern handlePossibleCenter(int[],int,int) -> a
com.google.zxing.qrcode.detector.Detector -> com.google.zxing.g.b.c:
    com.google.zxing.common.BitMatrix image -> a
    com.google.zxing.ResultPointCallback resultPointCallback -> b
    com.google.zxing.common.DetectorResult detect(java.util.Map) -> a
    com.google.zxing.common.DetectorResult processFinderPatternInfo(com.google.zxing.qrcode.detector.FinderPatternInfo) -> a
    com.google.zxing.common.PerspectiveTransform createTransform(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,int) -> a
    com.google.zxing.common.BitMatrix sampleGrid(com.google.zxing.common.BitMatrix,com.google.zxing.common.PerspectiveTransform,int) -> a
    int computeDimension(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,float) -> a
    float calculateModuleSize(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
    float calculateModuleSizeOneWay(com.google.zxing.ResultPoint,com.google.zxing.ResultPoint) -> a
    float sizeOfBlackWhiteBlackRunBothWays(int,int,int,int) -> a
    float sizeOfBlackWhiteBlackRun(int,int,int,int) -> b
    com.google.zxing.qrcode.detector.AlignmentPattern findAlignmentInRegion(float,int,int,float) -> a
com.google.zxing.qrcode.detector.FinderPattern -> com.google.zxing.g.b.d:
    float estimatedModuleSize -> a
    int count -> b
    float getEstimatedModuleSize() -> c
    int getCount() -> d
    boolean aboutEquals(float,float,float) -> a
    com.google.zxing.qrcode.detector.FinderPattern combineEstimate(float,float,float) -> b
com.google.zxing.qrcode.detector.FinderPatternFinder -> com.google.zxing.g.b.e:
    com.google.zxing.common.BitMatrix image -> a
    java.util.List possibleCenters -> b
    boolean hasSkipped -> c
    int[] crossCheckStateCount -> d
    com.google.zxing.ResultPointCallback resultPointCallback -> e
    com.google.zxing.qrcode.detector.FinderPatternInfo find(java.util.Map) -> a
    float centerFromEnd(int[],int) -> a
    boolean foundPatternCross(int[]) -> a
    int[] getCrossCheckStateCount() -> a
    float crossCheckVertical(int,int,int,int) -> a
    float crossCheckHorizontal(int,int,int,int) -> b
    boolean handlePossibleCenter(int[],int,int) -> a
    int findRowSkip() -> b
    boolean haveMultiplyConfirmedCenters() -> c
    com.google.zxing.qrcode.detector.FinderPattern[] selectBestPatterns() -> d
com.google.zxing.qrcode.detector.FinderPatternFinder$1 -> com.google.zxing.g.b.f:
com.google.zxing.qrcode.detector.FinderPatternFinder$CenterComparator -> com.google.zxing.g.b.g:
    float average -> a
    int compare(com.google.zxing.qrcode.detector.FinderPattern,com.google.zxing.qrcode.detector.FinderPattern) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.zxing.qrcode.detector.FinderPatternFinder$FurthestFromAverageComparator -> com.google.zxing.g.b.h:
    float average -> a
    int compare(com.google.zxing.qrcode.detector.FinderPattern,com.google.zxing.qrcode.detector.FinderPattern) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.google.zxing.qrcode.detector.FinderPatternInfo -> com.google.zxing.g.b.i:
    com.google.zxing.qrcode.detector.FinderPattern bottomLeft -> a
    com.google.zxing.qrcode.detector.FinderPattern topLeft -> b
    com.google.zxing.qrcode.detector.FinderPattern topRight -> c
    com.google.zxing.qrcode.detector.FinderPattern getBottomLeft() -> a
    com.google.zxing.qrcode.detector.FinderPattern getTopLeft() -> b
    com.google.zxing.qrcode.detector.FinderPattern getTopRight() -> c
com.google.zxing.qrcode.encoder.BlockPair -> com.google.zxing.g.c.a:
    byte[] dataBytes -> a
    byte[] errorCorrectionBytes -> b
    byte[] getDataBytes() -> a
    byte[] getErrorCorrectionBytes() -> b
com.google.zxing.qrcode.encoder.ByteMatrix -> com.google.zxing.g.c.b:
    byte[][] bytes -> a
    int width -> b
    int height -> c
    int getHeight() -> a
    int getWidth() -> b
    byte get(int,int) -> a
    byte[][] getArray() -> c
    void set(int,int,int) -> a
    void set(int,int,boolean) -> a
    void clear(byte) -> a
    java.lang.String toString() -> toString
com.google.zxing.qrcode.encoder.Encoder -> com.google.zxing.g.c.c:
    int[] ALPHANUMERIC_TABLE -> a
    int calculateMaskPenalty(com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    com.google.zxing.qrcode.encoder.QRCode encode(java.lang.String,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,java.util.Map) -> a
    int getAlphanumericCode(int) -> a
    com.google.zxing.qrcode.decoder.Mode chooseMode(java.lang.String,java.lang.String) -> a
    boolean isOnlyDoubleByteKanji(java.lang.String) -> a
    int chooseMaskPattern(com.google.zxing.common.BitArray,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    com.google.zxing.qrcode.decoder.Version chooseVersion(int,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    void terminateBits(int,com.google.zxing.common.BitArray) -> a
    void getNumDataBytesAndNumECBytesForBlockID(int,int,int,int,int[],int[]) -> a
    com.google.zxing.common.BitArray interleaveWithECBytes(com.google.zxing.common.BitArray,int,int,int) -> a
    byte[] generateECBytes(byte[],int) -> a
    void appendModeInfo(com.google.zxing.qrcode.decoder.Mode,com.google.zxing.common.BitArray) -> a
    void appendLengthInfo(int,com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.decoder.Mode,com.google.zxing.common.BitArray) -> a
    void appendBytes(java.lang.String,com.google.zxing.qrcode.decoder.Mode,com.google.zxing.common.BitArray,java.lang.String) -> a
    void appendNumericBytes(java.lang.CharSequence,com.google.zxing.common.BitArray) -> a
    void appendAlphanumericBytes(java.lang.CharSequence,com.google.zxing.common.BitArray) -> b
    void append8BitBytes(java.lang.String,com.google.zxing.common.BitArray,java.lang.String) -> a
    void appendKanjiBytes(java.lang.String,com.google.zxing.common.BitArray) -> a
    void appendECI(com.google.zxing.common.CharacterSetECI,com.google.zxing.common.BitArray) -> a
com.google.zxing.qrcode.encoder.Encoder$1 -> com.google.zxing.g.c.d:
    int[] $SwitchMap$com$google$zxing$qrcode$decoder$Mode -> a
com.google.zxing.qrcode.encoder.MaskUtil -> com.google.zxing.g.c.e:
    int applyMaskPenaltyRule1(com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    int applyMaskPenaltyRule2(com.google.zxing.qrcode.encoder.ByteMatrix) -> b
    int applyMaskPenaltyRule3(com.google.zxing.qrcode.encoder.ByteMatrix) -> c
    int applyMaskPenaltyRule4(com.google.zxing.qrcode.encoder.ByteMatrix) -> d
    boolean getDataMaskBit(int,int,int) -> a
    int applyMaskPenaltyRule1Internal(com.google.zxing.qrcode.encoder.ByteMatrix,boolean) -> a
com.google.zxing.qrcode.encoder.MatrixUtil -> com.google.zxing.g.c.f:
    int[][] POSITION_DETECTION_PATTERN -> a
    int[][] POSITION_ADJUSTMENT_PATTERN -> b
    int[][] POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE -> c
    int[][] TYPE_INFO_COORDINATES -> d
    void clearMatrix(com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    void buildMatrix(com.google.zxing.common.BitArray,com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,com.google.zxing.qrcode.decoder.Version,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    void embedBasicPatterns(com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    void embedTypeInfo(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    void maybeEmbedVersionInfo(com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.encoder.ByteMatrix) -> b
    void embedDataBits(com.google.zxing.common.BitArray,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    int findMSBSet(int) -> a
    int calculateBCHCode(int,int) -> a
    void makeTypeInfoBits(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel,int,com.google.zxing.common.BitArray) -> a
    void makeVersionInfoBits(com.google.zxing.qrcode.decoder.Version,com.google.zxing.common.BitArray) -> a
    boolean isEmpty(int) -> b
    void embedTimingPatterns(com.google.zxing.qrcode.encoder.ByteMatrix) -> b
    void embedDarkDotAtLeftBottomCorner(com.google.zxing.qrcode.encoder.ByteMatrix) -> c
    void embedHorizontalSeparationPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    void embedVerticalSeparationPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> b
    void embedPositionAdjustmentPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> c
    void embedPositionDetectionPattern(int,int,com.google.zxing.qrcode.encoder.ByteMatrix) -> d
    void embedPositionDetectionPatternsAndSeparators(com.google.zxing.qrcode.encoder.ByteMatrix) -> d
    void maybeEmbedPositionAdjustmentPatterns(com.google.zxing.qrcode.decoder.Version,com.google.zxing.qrcode.encoder.ByteMatrix) -> c
com.google.zxing.qrcode.encoder.QRCode -> com.google.zxing.g.c.g:
    com.google.zxing.qrcode.decoder.Mode mode -> a
    com.google.zxing.qrcode.decoder.ErrorCorrectionLevel ecLevel -> b
    com.google.zxing.qrcode.decoder.Version version -> c
    int maskPattern -> d
    com.google.zxing.qrcode.encoder.ByteMatrix matrix -> e
    com.google.zxing.qrcode.encoder.ByteMatrix getMatrix() -> a
    java.lang.String toString() -> toString
    void setMode(com.google.zxing.qrcode.decoder.Mode) -> a
    void setECLevel(com.google.zxing.qrcode.decoder.ErrorCorrectionLevel) -> a
    void setVersion(com.google.zxing.qrcode.decoder.Version) -> a
    void setMaskPattern(int) -> a
    void setMatrix(com.google.zxing.qrcode.encoder.ByteMatrix) -> a
    boolean isValidMaskPattern(int) -> b
com.xconns.peerdevicenet.DeviceInfo -> com.xconns.peerdevicenet.DeviceInfo:
    java.lang.String name -> a
    java.lang.String addr -> b
    java.lang.String port -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    void readFromParcel(android.os.Parcel) -> a
com.xconns.peerdevicenet.DeviceInfo$1 -> com.xconns.peerdevicenet.a:
    com.xconns.peerdevicenet.DeviceInfo[] newArray(int) -> a
    com.xconns.peerdevicenet.DeviceInfo createFromParcel(android.os.Parcel) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.xconns.peerdevicenet.IRouterConnectionHandler -> com.xconns.peerdevicenet.b:
    void onError(java.lang.String) -> a
    void onGetNetworks(com.xconns.peerdevicenet.NetInfo[]) -> a
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> b
    void onGetActiveNetwork(com.xconns.peerdevicenet.NetInfo) -> c
    void onNetworkActivated(com.xconns.peerdevicenet.NetInfo) -> d
    void onSearchStart(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSearchFoundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void onSearchComplete() -> a
    void onConnecting(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onConnectionFailed(com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void onConnected(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onDisconnected(com.xconns.peerdevicenet.DeviceInfo) -> c
    void onSetConnectionInfo() -> b
    void onGetConnectionInfo(java.lang.String,boolean,int,int,int) -> a
    void onGetDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> d
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> a
com.xconns.peerdevicenet.IRouterConnectionHandler$Stub -> com.xconns.peerdevicenet.c:
    com.xconns.peerdevicenet.IRouterConnectionHandler asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.xconns.peerdevicenet.IRouterConnectionHandler$Stub$Proxy -> com.xconns.peerdevicenet.d:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void onError(java.lang.String) -> a
    void onGetNetworks(com.xconns.peerdevicenet.NetInfo[]) -> a
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> b
    void onGetActiveNetwork(com.xconns.peerdevicenet.NetInfo) -> c
    void onNetworkActivated(com.xconns.peerdevicenet.NetInfo) -> d
    void onSearchStart(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSearchFoundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void onSearchComplete() -> a
    void onConnecting(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onConnectionFailed(com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void onConnected(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onDisconnected(com.xconns.peerdevicenet.DeviceInfo) -> c
    void onSetConnectionInfo() -> b
    void onGetConnectionInfo(java.lang.String,boolean,int,int,int) -> a
    void onGetDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> d
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> a
com.xconns.peerdevicenet.IRouterConnectionService -> com.xconns.peerdevicenet.e:
    void shutdown() -> a
    int startSession(com.xconns.peerdevicenet.IRouterConnectionHandler) -> a
    void stopSession(int) -> a
    void getNetworks(int) -> b
    void getActiveNetwork(int) -> c
    void activateNetwork(int,com.xconns.peerdevicenet.NetInfo) -> a
    void startPeerSearch(int,com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void stopPeerSearch(int) -> d
    void connect(int,com.xconns.peerdevicenet.DeviceInfo,byte[],int) -> a
    void disconnect(int,com.xconns.peerdevicenet.DeviceInfo) -> a
    void acceptConnection(int,com.xconns.peerdevicenet.DeviceInfo) -> b
    void denyConnection(int,com.xconns.peerdevicenet.DeviceInfo,int) -> b
    void setConnectionInfo(int,java.lang.String,boolean,int,int,int) -> a
    void getConnectionInfo(int) -> e
    void getDeviceInfo(int) -> f
    void getPeerDevices(int) -> g
com.xconns.peerdevicenet.IRouterConnectionService$Stub -> com.xconns.peerdevicenet.f:
    com.xconns.peerdevicenet.IRouterConnectionService asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.xconns.peerdevicenet.IRouterConnectionService$Stub$Proxy -> com.xconns.peerdevicenet.g:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void shutdown() -> a
    int startSession(com.xconns.peerdevicenet.IRouterConnectionHandler) -> a
    void stopSession(int) -> a
    void getNetworks(int) -> b
    void getActiveNetwork(int) -> c
    void activateNetwork(int,com.xconns.peerdevicenet.NetInfo) -> a
    void startPeerSearch(int,com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void stopPeerSearch(int) -> d
    void connect(int,com.xconns.peerdevicenet.DeviceInfo,byte[],int) -> a
    void disconnect(int,com.xconns.peerdevicenet.DeviceInfo) -> a
    void acceptConnection(int,com.xconns.peerdevicenet.DeviceInfo) -> b
    void denyConnection(int,com.xconns.peerdevicenet.DeviceInfo,int) -> b
    void setConnectionInfo(int,java.lang.String,boolean,int,int,int) -> a
    void getConnectionInfo(int) -> e
    void getDeviceInfo(int) -> f
    void getPeerDevices(int) -> g
com.xconns.peerdevicenet.IRouterGroupHandler -> com.xconns.peerdevicenet.h:
    void onError(java.lang.String) -> a
    void onSelfJoin(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onPeerJoin(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSelfLeave() -> a
    void onPeerLeave(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onReceive(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> b
com.xconns.peerdevicenet.IRouterGroupHandler$Stub -> com.xconns.peerdevicenet.i:
    com.xconns.peerdevicenet.IRouterGroupHandler asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.xconns.peerdevicenet.IRouterGroupHandler$Stub$Proxy -> com.xconns.peerdevicenet.j:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void onError(java.lang.String) -> a
    void onSelfJoin(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onPeerJoin(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSelfLeave() -> a
    void onPeerLeave(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onReceive(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> b
com.xconns.peerdevicenet.IRouterGroupService -> com.xconns.peerdevicenet.k:
    void joinGroup(java.lang.String,com.xconns.peerdevicenet.DeviceInfo[],com.xconns.peerdevicenet.IRouterGroupHandler) -> a
    void leaveGroup(java.lang.String,com.xconns.peerdevicenet.IRouterGroupHandler) -> a
    void send(java.lang.String,com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void getPeerDevices(java.lang.String) -> a
com.xconns.peerdevicenet.IRouterGroupService$Stub -> com.xconns.peerdevicenet.l:
    com.xconns.peerdevicenet.IRouterGroupService asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.xconns.peerdevicenet.IRouterGroupService$Stub$Proxy -> com.xconns.peerdevicenet.m:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    void joinGroup(java.lang.String,com.xconns.peerdevicenet.DeviceInfo[],com.xconns.peerdevicenet.IRouterGroupHandler) -> a
    void leaveGroup(java.lang.String,com.xconns.peerdevicenet.IRouterGroupHandler) -> a
    void send(java.lang.String,com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void getPeerDevices(java.lang.String) -> a
com.xconns.peerdevicenet.NetInfo -> com.xconns.peerdevicenet.NetInfo:
    int type -> a
    java.lang.String name -> b
    int encrypt -> c
    java.lang.String pass -> d
    boolean hidden -> e
    byte[] info -> f
    java.lang.String intfName -> g
    java.lang.String addr -> h
    boolean mcast -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.lang.String NetTypeName(int) -> a
    java.lang.String NetEncryptionName(int) -> b
    java.lang.String toString() -> toString
    int describeContents() -> describeContents
    void readFromParcel(android.os.Parcel) -> a
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.xconns.peerdevicenet.NetInfo$1 -> com.xconns.peerdevicenet.n:
    com.xconns.peerdevicenet.NetInfo[] newArray(int) -> a
    com.xconns.peerdevicenet.NetInfo createFromParcel(android.os.Parcel) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.xconns.peerdevicenet.Router -> com.xconns.peerdevicenet.o:
    java.lang.String MsgName(int) -> a
com.xconns.peerdevicenet.RouterConnectionClient -> com.xconns.peerdevicenet.p:
    android.content.Context context -> a
    int sessionId -> b
    com.xconns.peerdevicenet.IRouterConnectionService mConnService -> c
    com.xconns.peerdevicenet.RouterConnectionClient$ConnectionHandler registeredHandler -> d
    java.util.List sentMsgBuf -> e
    com.xconns.peerdevicenet.IRouterConnectionHandler mConnHandler -> f
    android.content.ServiceConnection mConnection -> g
    void bindService() -> a
    void unbindService() -> b
    void sendBufferedMsgs() -> c
    void startPeerSearch(com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void stopPeerSearch() -> d
    void acceptConnection(com.xconns.peerdevicenet.DeviceInfo) -> a
    void denyConnection(com.xconns.peerdevicenet.DeviceInfo,int) -> b
    void connect(com.xconns.peerdevicenet.DeviceInfo,byte[],int) -> a
    void disconnect(com.xconns.peerdevicenet.DeviceInfo) -> b
    void setConnectionInfo(java.lang.String,boolean,int,int,int) -> a
    void getConnectionInfo() -> e
    void getDeviceInfo() -> f
    void getPeerDevices() -> g
    void getNetworks() -> h
    void getActiveNetwork() -> i
    void activateNetwork(com.xconns.peerdevicenet.NetInfo) -> a
    com.xconns.peerdevicenet.RouterConnectionClient$ConnectionHandler access$0(com.xconns.peerdevicenet.RouterConnectionClient) -> a
    void access$1(com.xconns.peerdevicenet.RouterConnectionClient,com.xconns.peerdevicenet.IRouterConnectionService) -> a
    com.xconns.peerdevicenet.IRouterConnectionService access$2(com.xconns.peerdevicenet.RouterConnectionClient) -> b
    com.xconns.peerdevicenet.IRouterConnectionHandler access$3(com.xconns.peerdevicenet.RouterConnectionClient) -> c
    void access$4(com.xconns.peerdevicenet.RouterConnectionClient,int) -> a
com.xconns.peerdevicenet.RouterConnectionClient$1 -> com.xconns.peerdevicenet.q:
    com.xconns.peerdevicenet.RouterConnectionClient this$0 -> a
    void onError(java.lang.String) -> a
    void onGetNetworks(com.xconns.peerdevicenet.NetInfo[]) -> a
    void onGetActiveNetwork(com.xconns.peerdevicenet.NetInfo) -> c
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> b
    void onNetworkActivated(com.xconns.peerdevicenet.NetInfo) -> d
    void onSearchStart(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSearchFoundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void onSearchComplete() -> a
    void onConnecting(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onConnectionFailed(com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void onConnected(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onDisconnected(com.xconns.peerdevicenet.DeviceInfo) -> c
    void onGetDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> d
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onSetConnectionInfo() -> b
    void onGetConnectionInfo(java.lang.String,boolean,int,int,int) -> a
com.xconns.peerdevicenet.RouterConnectionClient$2 -> com.xconns.peerdevicenet.r:
    com.xconns.peerdevicenet.RouterConnectionClient this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.xconns.peerdevicenet.RouterConnectionClient$ConnInfo -> com.xconns.peerdevicenet.s:
    java.lang.String name -> a
    int liveTime -> b
    int connTime -> c
    int searchTime -> d
    boolean useSSL -> e
com.xconns.peerdevicenet.RouterConnectionClient$ConnectionHandler -> com.xconns.peerdevicenet.t:
    void onError(java.lang.String) -> a
    void onGetNetworks(com.xconns.peerdevicenet.NetInfo[]) -> a
    void onGetActiveNetwork(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> b
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> c
    void onNetworkActivated(com.xconns.peerdevicenet.NetInfo) -> d
    void onSearchStart(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSearchFoundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void onSearchComplete() -> a
    void onConnecting(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onConnectionFailed(com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void onConnected(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onDisconnected(com.xconns.peerdevicenet.DeviceInfo) -> c
    void onSetConnectionInfo() -> b
    void onGetConnectionInfo(java.lang.String,boolean,int,int,int) -> a
    void onGetDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> d
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> a
com.xconns.peerdevicenet.apps.ColorPickerDialog -> com.xconns.peerdevicenet.apps.a:
    com.xconns.peerdevicenet.apps.ColorPickerDialog$OnColorChangedListener mListener -> a
    int mInitialColor -> b
    void onCreate(android.os.Bundle) -> onCreate
    com.xconns.peerdevicenet.apps.ColorPickerDialog$OnColorChangedListener access$0(com.xconns.peerdevicenet.apps.ColorPickerDialog) -> a
com.xconns.peerdevicenet.apps.ColorPickerDialog$1 -> com.xconns.peerdevicenet.apps.b:
    com.xconns.peerdevicenet.apps.ColorPickerDialog this$0 -> a
    void colorChanged(int) -> a
com.xconns.peerdevicenet.apps.ColorPickerDialog$ColorPickerView -> com.xconns.peerdevicenet.apps.c:
    android.graphics.Paint mPaint -> a
    android.graphics.Paint mCenterPaint -> b
    int[] mColors -> c
    com.xconns.peerdevicenet.apps.ColorPickerDialog$OnColorChangedListener mListener -> d
    boolean mTrackingCenter -> e
    boolean mHighlightCenter -> f
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    int ave(int,int,float) -> a
    int interpColor(int[],float) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
com.xconns.peerdevicenet.apps.ColorPickerDialog$OnColorChangedListener -> com.xconns.peerdevicenet.apps.d:
    void colorChanged(int) -> a
com.xconns.peerdevicenet.apps.Cube -> com.xconns.peerdevicenet.apps.e:
    java.nio.IntBuffer mVertexBuffer -> a
    java.nio.FloatBuffer mColorBuffer -> b
    java.nio.ByteBuffer mIndexBuffer -> c
    void draw(javax.microedition.khronos.opengles.GL10) -> a
com.xconns.peerdevicenet.apps.FingerPaint -> com.xconns.peerdevicenet.apps.FingerPaint:
    com.xconns.peerdevicenet.IRouterGroupService mGroupService -> f
    com.xconns.peerdevicenet.apps.FingerPaint$MyView myView -> a
    com.xconns.peerdevicenet.apps.Painter myPainter -> b
    java.util.HashMap peerPainters -> c
    long startTime -> d
    android.content.ServiceConnection mConnection -> g
    com.xconns.peerdevicenet.IRouterGroupHandler mGroupHandler -> h
    android.os.Handler mHandler -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void procPaintMsgFromPeer(com.xconns.peerdevicenet.DeviceInfo,com.xconns.peerdevicenet.apps.PaintMsg) -> a
    void sendPaintMsgToPeers(com.xconns.peerdevicenet.apps.PaintMsg) -> a
    void colorChanged(int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void access$0(com.xconns.peerdevicenet.apps.FingerPaint,com.xconns.peerdevicenet.IRouterGroupService) -> a
    com.xconns.peerdevicenet.IRouterGroupService access$1(com.xconns.peerdevicenet.apps.FingerPaint) -> a
    com.xconns.peerdevicenet.IRouterGroupHandler access$2(com.xconns.peerdevicenet.apps.FingerPaint) -> b
com.xconns.peerdevicenet.apps.FingerPaint$1 -> com.xconns.peerdevicenet.apps.f:
    com.xconns.peerdevicenet.apps.FingerPaint this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.xconns.peerdevicenet.apps.FingerPaint$2 -> com.xconns.peerdevicenet.apps.g:
    com.xconns.peerdevicenet.apps.FingerPaint this$0 -> a
    void onError(java.lang.String) -> a
    void onSelfJoin(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onPeerJoin(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSelfLeave() -> a
    void onPeerLeave(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onReceive(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> b
com.xconns.peerdevicenet.apps.FingerPaint$3 -> com.xconns.peerdevicenet.apps.h:
    com.xconns.peerdevicenet.apps.FingerPaint this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.xconns.peerdevicenet.apps.FingerPaint$MyView -> com.xconns.peerdevicenet.apps.i:
    android.graphics.Bitmap mBitmap -> e
    android.graphics.Canvas mCanvas -> f
    android.graphics.Paint mBitmapPaint -> g
    com.xconns.peerdevicenet.apps.FingerPaint context -> a
    int ww -> b
    int hh -> c
    com.xconns.peerdevicenet.apps.FingerPaint this$0 -> d
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void reset() -> a
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    android.graphics.Canvas access$0(com.xconns.peerdevicenet.apps.FingerPaint$MyView) -> a
com.xconns.peerdevicenet.apps.PaintMsg -> com.xconns.peerdevicenet.apps.j:
    int msgId -> a
    float x -> b
    float y -> c
    int val -> d
    byte[] marshall() -> a
    void unmarshall(byte[],int) -> a
com.xconns.peerdevicenet.apps.Painter -> com.xconns.peerdevicenet.apps.k:
    android.graphics.MaskFilter mEmboss -> a
    android.graphics.MaskFilter mBlur -> b
    android.graphics.Paint mPaint -> c
    android.graphics.Path mPath -> d
    float mX -> e
    float mY -> f
    void reset() -> a
    void resetPath() -> b
    boolean hasPath() -> c
    void touch_start(float,float) -> a
    void touch_move(float,float) -> b
    void touch_up() -> d
com.xconns.peerdevicenet.apps.RotateMsg -> com.xconns.peerdevicenet.apps.l:
    int msgId -> a
    float rx -> b
    float ry -> c
    byte[] marshall() -> a
    void unmarshall(byte[],int) -> a
com.xconns.peerdevicenet.apps.TouchRotateActivity -> com.xconns.peerdevicenet.apps.TouchRotateActivity:
    com.xconns.peerdevicenet.IRouterGroupService mGroupService -> b
    com.xconns.peerdevicenet.apps.TouchSurfaceView mGLSurfaceView -> c
    android.content.ServiceConnection mConnection -> d
    com.xconns.peerdevicenet.IRouterGroupHandler mGroupHandler -> e
    android.os.Handler mHandler -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void sendRotateMsgToPeers(com.xconns.peerdevicenet.apps.RotateMsg) -> a
    void procRotateMsgFromPeer(com.xconns.peerdevicenet.DeviceInfo,com.xconns.peerdevicenet.apps.RotateMsg) -> a
    void access$0(com.xconns.peerdevicenet.apps.TouchRotateActivity,com.xconns.peerdevicenet.IRouterGroupService) -> a
    com.xconns.peerdevicenet.IRouterGroupService access$1(com.xconns.peerdevicenet.apps.TouchRotateActivity) -> a
    com.xconns.peerdevicenet.IRouterGroupHandler access$2(com.xconns.peerdevicenet.apps.TouchRotateActivity) -> b
com.xconns.peerdevicenet.apps.TouchRotateActivity$1 -> com.xconns.peerdevicenet.apps.m:
    com.xconns.peerdevicenet.apps.TouchRotateActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.xconns.peerdevicenet.apps.TouchRotateActivity$2 -> com.xconns.peerdevicenet.apps.n:
    com.xconns.peerdevicenet.apps.TouchRotateActivity this$0 -> a
    void onError(java.lang.String) -> a
    void onSelfJoin(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onPeerJoin(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSelfLeave() -> a
    void onPeerLeave(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onReceive(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> b
com.xconns.peerdevicenet.apps.TouchRotateActivity$3 -> com.xconns.peerdevicenet.apps.o:
    com.xconns.peerdevicenet.apps.TouchRotateActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.xconns.peerdevicenet.apps.TouchSurfaceView -> com.xconns.peerdevicenet.apps.p:
    com.xconns.peerdevicenet.apps.TouchRotateActivity rotAct -> a
    float TOUCH_SCALE_FACTOR -> b
    float TRACKBALL_SCALE_FACTOR -> c
    com.xconns.peerdevicenet.apps.TouchSurfaceView$CubeRenderer mRenderer -> d
    float mPreviousX -> e
    float mPreviousY -> f
    boolean onTrackballEvent(android.view.MotionEvent) -> onTrackballEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void procRotateMsgFromPeer(com.xconns.peerdevicenet.apps.RotateMsg) -> a
    com.xconns.peerdevicenet.apps.RotateMsg getCurrentOrientation() -> a
com.xconns.peerdevicenet.apps.TouchSurfaceView$CubeRenderer -> com.xconns.peerdevicenet.apps.q:
    com.xconns.peerdevicenet.apps.Cube mCube -> d
    float mAngleX -> a
    float mAngleY -> b
    com.xconns.peerdevicenet.apps.TouchSurfaceView this$0 -> c
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
com.xconns.peerdevicenet.cm.ActionsPreferenceFragment -> com.xconns.peerdevicenet.cm.ActionsPreferenceFragment:
    com.xconns.peerdevicenet.cm.ConnectionManagerDualPane mActivity -> a
    com.xconns.peerdevicenet.cm.ConnectionManager cm -> b
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onCreate(android.os.Bundle) -> onCreate
    void onAttach(android.app.Activity) -> onAttach
    void onResume() -> onResume
com.xconns.peerdevicenet.cm.ConnInfo -> com.xconns.peerdevicenet.cm.a:
    java.lang.String devName -> a
    boolean useSSL -> b
    int liveTime -> c
    int connTime -> d
    int searchTime -> e
com.xconns.peerdevicenet.cm.ConnectionManager -> com.xconns.peerdevicenet.cm.b:
    android.preference.PreferenceActivity mContext -> a
    android.widget.ArrayAdapter askingPeers -> b
    java.util.ArrayList confirmedPeers -> c
    android.app.AlertDialog connConfirmDialog -> d
    android.preference.PreferenceCategory mGenSettingsCat -> e
    android.preference.PreferenceCategory mConnDeviceCat -> f
    android.content.SharedPreferences sharedPref -> g
    android.net.wifi.WifiManager mWifiManager -> h
    com.xconns.peerdevicenet.DeviceInfo mDevice -> i
    android.preference.Preference mShutdownPref -> j
    android.preference.Preference mCleanupPref -> k
    android.preference.Preference mRotCubePref -> l
    android.preference.Preference mPaintPref -> m
    android.preference.Preference mLicensePref -> n
    android.preference.Preference mTutorialPref -> o
    android.preference.EditTextPreference mDeviceNamePref -> p
    com.xconns.peerdevicenet.cm.NetListPreference mNetPref -> q
    java.lang.String mNetName -> r
    java.util.HashMap mNets -> s
    java.util.ArrayList netListEntries -> t
    java.util.ArrayList netListValues -> u
    com.xconns.peerdevicenet.cm.ProgressPreference mConnectorPref -> v
    boolean connectorSearch -> w
    com.xconns.peerdevicenet.cm.ProgressPreference mScanNearbyPref -> x
    android.preference.PreferenceCategory mWifiDirHotspotCat -> y
    android.preference.CheckBoxPreference mWifiDirHotspotPref -> z
    boolean wifiDirectSupported -> A
    com.xconns.peerdevicenet.core.WifiDirectGroupManager grpMgr -> B
    com.xconns.peerdevicenet.NetInfo mCurrWifiDirectNet -> C
    android.preference.Preference mDeviceAddrPref -> D
    android.preference.Preference mDevicePortPref -> E
    android.preference.ListPreference mSearchTimeoutPref -> F
    java.lang.String mSearchTimeout -> G
    android.preference.ListPreference mLiveTimeoutPref -> H
    java.lang.String mLiveTimeout -> I
    android.preference.ListPreference mConnTimeoutPref -> J
    java.lang.String mConnTimeout -> K
    android.preference.ListPreference mMaxSessionsPref -> L
    java.lang.String mMaxSessions -> M
    android.preference.CheckBoxPreference mConnPINPref -> N
    boolean mConnPIN -> O
    android.preference.CheckBoxPreference mAutoScanPref -> P
    boolean mAutoScan -> Q
    android.preference.CheckBoxPreference mAutoConnPref -> R
    boolean mAutoConn -> S
    android.preference.CheckBoxPreference mAutoAcceptPref -> T
    boolean mAutoAccept -> U
    android.preference.CheckBoxPreference mUseSSLPref -> V
    boolean useSSL -> W
    int max_sessions -> X
    int scanStarted -> Y
    boolean scanToggleOn -> Z
    int live_timeout -> aa
    int scan_timeout -> ab
    int conn_timeout -> ac
    com.xconns.peerdevicenet.cm.ConnectionManagerService connMgrService -> ad
    boolean mInited -> ae
    android.app.AlertDialog connFailDialog -> af
    android.app.AlertDialog sslDiffDialog -> ag
    int connFailCode -> ah
    com.xconns.peerdevicenet.DeviceInfo connFailDevice -> ai
    com.xconns.peerdevicenet.DeviceInfo sslDiffDevice -> aj
    boolean peerSSL -> ak
    java.lang.CharSequence wifi_title -> al
    java.lang.CharSequence wifi_hotspot_title -> am
    java.lang.CharSequence wifi_direct_title -> an
    java.lang.CharSequence config_nets -> ao
    java.lang.CharSequence config_new_nets -> ap
    java.lang.CharSequence reject_title -> aq
    java.lang.CharSequence reject_postfix -> ar
    java.lang.CharSequence reject_connmgr_inactive -> as
    java.lang.CharSequence reject_pin_mismatch -> at
    java.lang.CharSequence reject_by_peer -> au
    java.lang.CharSequence reject_by_self_conn -> av
    java.lang.CharSequence seconds -> aw
    java.lang.CharSequence sessions -> ax
    java.lang.CharSequence netName -> ay
    java.lang.CharSequence passphrase -> az
    java.lang.CharSequence checkSetting -> aA
    java.lang.CharSequence peer_ssl_diff_msg -> aB
    android.content.ServiceConnection mConnection -> aH
    android.content.DialogInterface$OnMultiChoiceClickListener connConfirmHandler -> aC
    android.preference.Preference$OnPreferenceClickListener disconnDeviceListener -> aD
    android.preference.Preference$OnPreferenceClickListener connDeviceListener -> aE
    android.content.SharedPreferences$OnSharedPreferenceChangeListener prefChangeListener -> aF
    android.os.Handler mHandler -> aG
    void onCreate() -> a
    void attachConnectionsGUI(android.preference.PreferenceScreen) -> a
    void attachConnectionSettingsGUI(android.preference.PreferenceScreen) -> b
    void attachActionsGUI(android.preference.PreferenceScreen) -> c
    void initConnSettings() -> b
    void shutdownAll() -> c
    void toggleConnectionButtons(boolean) -> a
    void toggle_scan() -> d
    void start_scan() -> e
    void stop_scan() -> f
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> b
    void onNetworkActivated(com.xconns.peerdevicenet.NetInfo) -> c
    void onGetActiveNetwork(com.xconns.peerdevicenet.NetInfo) -> d
    void onGetNetworks(com.xconns.peerdevicenet.NetInfo[]) -> a
    void showActiveNet(com.xconns.peerdevicenet.NetInfo) -> e
    void activateNet(java.lang.String) -> a
    void getPeerDeviceNetInfo() -> g
    void onDestroy(boolean) -> b
    void onResume() -> h
    void onPause() -> i
    android.app.Dialog onCreateDialog(int) -> a
    void onPrepareDialog(int,android.app.Dialog) -> a
    void initNameAddrPort() -> j
    void handleConnConfirm() -> k
    void handleConnCancel() -> l
    void resetConnSession() -> m
    void onConnectPeerDevice(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onDisconnectPeerDevice(com.xconns.peerdevicenet.DeviceInfo) -> b
    void removeAllPeerDevices() -> n
    void showDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> c
    void onGetDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> d
    void onGetConnectionInfo(com.xconns.peerdevicenet.cm.ConnInfo) -> a
    android.preference.CheckBoxPreference connPeerDevice(com.xconns.peerdevicenet.DeviceInfo) -> e
    void addNearbyDevice(com.xconns.peerdevicenet.DeviceInfo) -> f
    void getDeviceInfo() -> o
    void updateName() -> p
    void showConnConfirmDialog(com.xconns.peerdevicenet.DeviceInfo) -> g
com.xconns.peerdevicenet.cm.ConnectionManager$1 -> com.xconns.peerdevicenet.cm.c:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.xconns.peerdevicenet.cm.ConnectionManager$10 -> com.xconns.peerdevicenet.cm.d:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.xconns.peerdevicenet.cm.ConnectionManager$11 -> com.xconns.peerdevicenet.cm.e:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.xconns.peerdevicenet.cm.ConnectionManager$12 -> com.xconns.peerdevicenet.cm.f:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.xconns.peerdevicenet.cm.ConnectionManager$13 -> com.xconns.peerdevicenet.cm.g:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.xconns.peerdevicenet.cm.ConnectionManager$14 -> com.xconns.peerdevicenet.cm.h:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.xconns.peerdevicenet.cm.ConnectionManager$15 -> com.xconns.peerdevicenet.cm.i:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.xconns.peerdevicenet.cm.ConnectionManager$16 -> com.xconns.peerdevicenet.cm.j:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.xconns.peerdevicenet.cm.ConnectionManager$17 -> com.xconns.peerdevicenet.cm.k:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.ConnectionManager$18 -> com.xconns.peerdevicenet.cm.l:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.ConnectionManager$19 -> com.xconns.peerdevicenet.cm.m:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.ConnectionManager$2 -> com.xconns.peerdevicenet.cm.n:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
com.xconns.peerdevicenet.cm.ConnectionManager$20 -> com.xconns.peerdevicenet.cm.o:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.ConnectionManager$21 -> com.xconns.peerdevicenet.cm.p:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    android.widget.EditText val$pinEntry -> b
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.ConnectionManager$22 -> com.xconns.peerdevicenet.cm.q:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.ConnectionManager$23 -> com.xconns.peerdevicenet.cm.r:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.ConnectionManager$24 -> com.xconns.peerdevicenet.cm.s:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.ConnectionManager$25 -> com.xconns.peerdevicenet.cm.t:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.ConnectionManager$3 -> com.xconns.peerdevicenet.cm.u:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.xconns.peerdevicenet.cm.ConnectionManager$4 -> com.xconns.peerdevicenet.cm.v:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.xconns.peerdevicenet.cm.ConnectionManager$5 -> com.xconns.peerdevicenet.cm.w:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
com.xconns.peerdevicenet.cm.ConnectionManager$6 -> com.xconns.peerdevicenet.cm.x:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.xconns.peerdevicenet.cm.ConnectionManager$7 -> com.xconns.peerdevicenet.cm.y:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    void onError(java.lang.String) -> a
    void onWifiDirectNotEnabled() -> a
com.xconns.peerdevicenet.cm.ConnectionManager$8 -> com.xconns.peerdevicenet.cm.z:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.xconns.peerdevicenet.cm.ConnectionManager$9 -> com.xconns.peerdevicenet.cm.aa:
    com.xconns.peerdevicenet.cm.ConnectionManager this$0 -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.xconns.peerdevicenet.cm.ConnectionManagerActivity -> com.xconns.peerdevicenet.cm.ConnectionManagerActivity:
    com.xconns.peerdevicenet.cm.ConnectionManager cm -> a
    boolean mJumpToAddPeer -> b
    boolean configChange -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onDestroy() -> onDestroy
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onPrepareDialog(int,android.app.Dialog) -> onPrepareDialog
com.xconns.peerdevicenet.cm.ConnectionManagerDualPane -> com.xconns.peerdevicenet.cm.ConnectionManagerDualPane:
    boolean mJumpToAddPeer -> a
    com.xconns.peerdevicenet.cm.ConnectionManager mConnMgr -> b
    boolean configChange -> c
    void onBuildHeaders(java.util.List) -> onBuildHeaders
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onDestroy() -> onDestroy
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    void onPrepareDialog(int,android.app.Dialog) -> onPrepareDialog
com.xconns.peerdevicenet.cm.ConnectionManagerService -> com.xconns.peerdevicenet.cm.ConnectionManagerService:
    java.lang.String DEFAULT_PIN -> a
    java.lang.String securityToken -> b
    com.xconns.peerdevicenet.NetInfo actNet -> c
    java.lang.Object actNetLock -> d
    java.util.HashMap connNets -> e
    java.util.Map discoveredDevices -> f
    java.util.Map rejectedPeers -> g
    java.util.Set connectingPeers -> h
    java.util.Set connectedPeers -> i
    java.util.Map askingPeers -> j
    com.xconns.peerdevicenet.DeviceInfo searchLeader -> k
    boolean mAutoAccept -> l
    boolean mAutoConn -> m
    int liveTimeout -> n
    int searchTimeout -> o
    int connTimeout -> p
    boolean useSSL -> q
    com.xconns.peerdevicenet.DeviceInfo mDevice -> r
    int scanStarted -> s
    int scanLeftOver -> t
    com.xconns.peerdevicenet.RouterConnectionClient connClient -> u
    com.xconns.peerdevicenet.cm.ConnectionManager connMgr -> v
    com.xconns.peerdevicenet.ctor.ConnectorActivity ctor -> w
    android.os.IBinder mBinder -> x
    com.xconns.peerdevicenet.RouterConnectionClient$ConnectionHandler connHandler -> y
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    void setConnector(com.xconns.peerdevicenet.ctor.ConnectorActivity) -> a
    void setConnMgr(com.xconns.peerdevicenet.cm.ConnectionManager) -> a
    void setConnParams(boolean,boolean) -> a
    void setConnectionInfo(int,int,int,boolean) -> a
    void setSimpleConnectionInfo(java.lang.String,boolean) -> a
    void setDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> a
    void setConnPIN(java.lang.String) -> a
    void onConnMgrDestroy(boolean) -> a
    void onConnectorDestroy() -> a
    boolean connectorSessionActive() -> b
    void saveDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> b
    void getDeviceInfo() -> c
    void connectPeer(com.xconns.peerdevicenet.DeviceInfo,byte[],int) -> a
    void disconnectPeer(com.xconns.peerdevicenet.DeviceInfo) -> c
    void acceptPeer(java.lang.String) -> b
    void denyPeer(java.lang.String) -> c
    void startPeerSearch(com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void startPeerSearch(com.xconns.peerdevicenet.DeviceInfo) -> d
    void stopPeerSearch() -> d
    void getConnectionInfo() -> e
    void getNetworks() -> f
    com.xconns.peerdevicenet.NetInfo[] getNets() -> g
    com.xconns.peerdevicenet.NetInfo getActNet() -> h
    void getActiveNetwork() -> i
    void activateNetwork(com.xconns.peerdevicenet.NetInfo) -> a
com.xconns.peerdevicenet.cm.ConnectionManagerService$1 -> com.xconns.peerdevicenet.cm.ab:
    com.xconns.peerdevicenet.cm.ConnectionManagerService this$0 -> a
    void onError(java.lang.String) -> a
    void onConnected(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onDisconnected(com.xconns.peerdevicenet.DeviceInfo) -> c
    void onGetDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> d
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onConnecting(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onConnectionFailed(com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void onSearchStart(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSearchFoundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void onSearchComplete() -> a
    void onGetNetworks(com.xconns.peerdevicenet.NetInfo[]) -> a
    void onGetActiveNetwork(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> b
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> c
    void onNetworkActivated(com.xconns.peerdevicenet.NetInfo) -> d
    void onSetConnectionInfo() -> b
    void onGetConnectionInfo(java.lang.String,boolean,int,int,int) -> a
com.xconns.peerdevicenet.cm.ConnectionManagerService$LocalBinder -> com.xconns.peerdevicenet.cm.ac:
    com.xconns.peerdevicenet.cm.ConnectionManagerService this$0 -> a
    com.xconns.peerdevicenet.cm.ConnectionManagerService getService() -> a
com.xconns.peerdevicenet.cm.ConnectionSettingsPreferenceFragment -> com.xconns.peerdevicenet.cm.ConnectionSettingsPreferenceFragment:
    com.xconns.peerdevicenet.cm.ConnectionManagerDualPane mActivity -> a
    com.xconns.peerdevicenet.cm.ConnectionManager cm -> b
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onCreate(android.os.Bundle) -> onCreate
    void onAttach(android.app.Activity) -> onAttach
    void onResume() -> onResume
com.xconns.peerdevicenet.cm.ConnectionsPreferenceFragment -> com.xconns.peerdevicenet.cm.ConnectionsPreferenceFragment:
    com.xconns.peerdevicenet.cm.ConnectionManagerDualPane mActivity -> a
    com.xconns.peerdevicenet.cm.ConnectionManager cm -> b
    void onActivityCreated(android.os.Bundle) -> onActivityCreated
    void onCreate(android.os.Bundle) -> onCreate
    void onAttach(android.app.Activity) -> onAttach
    void onResume() -> onResume
com.xconns.peerdevicenet.cm.NetListPreference -> com.xconns.peerdevicenet.cm.NetListPreference:
    android.content.Context context -> a
    com.xconns.peerdevicenet.cm.ConnectionManager cm -> b
    int sel -> c
    void setCM(com.xconns.peerdevicenet.cm.ConnectionManager) -> a
    void setSel(int) -> a
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
com.xconns.peerdevicenet.cm.NetListPreference$1 -> com.xconns.peerdevicenet.cm.ad:
    com.xconns.peerdevicenet.cm.NetListPreference this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.PreferenceLauncher -> com.xconns.peerdevicenet.cm.PreferenceLauncher:
    java.lang.String eulaKey -> d
    android.content.pm.PackageInfo versionInfo -> a
    android.content.SharedPreferences prefs -> b
    android.content.Intent intent -> c
    void onCreate(android.os.Bundle) -> onCreate
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
    android.content.pm.PackageInfo getPackageInfo() -> b
    boolean licenseAgreed() -> a
    void launch(android.content.Intent) -> a
    java.lang.String access$0(com.xconns.peerdevicenet.cm.PreferenceLauncher) -> a
com.xconns.peerdevicenet.cm.PreferenceLauncher$1 -> com.xconns.peerdevicenet.cm.ae:
    com.xconns.peerdevicenet.cm.PreferenceLauncher this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.PreferenceLauncher$2 -> com.xconns.peerdevicenet.cm.af:
    com.xconns.peerdevicenet.cm.PreferenceLauncher this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.PreferenceLauncher$3 -> com.xconns.peerdevicenet.cm.ag:
    com.xconns.peerdevicenet.cm.PreferenceLauncher this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.cm.ProgressPreference -> com.xconns.peerdevicenet.cm.ProgressPreference:
    android.widget.ProgressBar mProgress -> a
    boolean started -> b
    void onBindView(android.view.View) -> onBindView
    void startProgress() -> a
    void stopProgress() -> b
com.xconns.peerdevicenet.core.AidlConnAPIPeer -> com.xconns.peerdevicenet.core.a:
    com.xconns.peerdevicenet.core.CoreAPI router -> a
    com.xconns.peerdevicenet.IRouterConnectionService$Stub mBinder -> b
    void stop() -> a
    android.os.IBinder getBinder() -> b
com.xconns.peerdevicenet.core.AidlConnAPIPeer$1 -> com.xconns.peerdevicenet.core.b:
    com.xconns.peerdevicenet.core.AidlConnAPIPeer this$0 -> a
    void connect(int,com.xconns.peerdevicenet.DeviceInfo,byte[],int) -> a
    void disconnect(int,com.xconns.peerdevicenet.DeviceInfo) -> a
    void getDeviceInfo(int) -> f
    void getPeerDevices(int) -> g
    void shutdown() -> a
    void startPeerSearch(int,com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void stopPeerSearch(int) -> d
    void acceptConnection(int,com.xconns.peerdevicenet.DeviceInfo) -> b
    void denyConnection(int,com.xconns.peerdevicenet.DeviceInfo,int) -> b
    int startSession(com.xconns.peerdevicenet.IRouterConnectionHandler) -> a
    void stopSession(int) -> a
    void getNetworks(int) -> b
    void getActiveNetwork(int) -> c
    void activateNetwork(int,com.xconns.peerdevicenet.NetInfo) -> a
    void setConnectionInfo(int,java.lang.String,boolean,int,int,int) -> a
    void getConnectionInfo(int) -> e
com.xconns.peerdevicenet.core.AidlConnAPIPeer$MyConnHandler -> com.xconns.peerdevicenet.core.c:
    com.xconns.peerdevicenet.IRouterConnectionHandler handler -> a
    com.xconns.peerdevicenet.core.AidlConnAPIPeer this$0 -> b
    void onError(java.lang.String) -> a
    void onConnected(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onDisconnected(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onGetDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> c
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onSearchStart(com.xconns.peerdevicenet.DeviceInfo) -> d
    void onSearchFoundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void onSearchComplete() -> a
    void onConnecting(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onConnectionFailed(com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void onGetNetworks(com.xconns.peerdevicenet.NetInfo[]) -> a
    void onGetActiveNetwork(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> b
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> c
    void onNetworkActivated(com.xconns.peerdevicenet.NetInfo) -> d
    void onSetConnectionInfo() -> b
    void onGetConnectionInfo(java.lang.String,boolean,int,int,int) -> a
com.xconns.peerdevicenet.core.AidlGroupAPIPeer -> com.xconns.peerdevicenet.core.d:
    com.xconns.peerdevicenet.core.CoreAPI router -> a
    com.xconns.peerdevicenet.IRouterGroupService$Stub mBinder -> b
    void stop() -> a
    android.os.IBinder getBinder() -> b
com.xconns.peerdevicenet.core.AidlGroupAPIPeer$1 -> com.xconns.peerdevicenet.core.e:
    com.xconns.peerdevicenet.core.AidlGroupAPIPeer this$0 -> a
    void joinGroup(java.lang.String,com.xconns.peerdevicenet.DeviceInfo[],com.xconns.peerdevicenet.IRouterGroupHandler) -> a
    void leaveGroup(java.lang.String,com.xconns.peerdevicenet.IRouterGroupHandler) -> a
    void send(java.lang.String,com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void getPeerDevices(java.lang.String) -> a
com.xconns.peerdevicenet.core.AidlGroupAPIPeer$MyGroupHandler -> com.xconns.peerdevicenet.core.f:
    com.xconns.peerdevicenet.IRouterGroupHandler handler -> a
    com.xconns.peerdevicenet.core.AidlGroupAPIPeer this$0 -> b
    void onError(java.lang.String) -> a
    void onSelfJoin(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onPeerJoin(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSelfLeave() -> a
    void onPeerLeave(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onReceive(com.xconns.peerdevicenet.DeviceInfo,android.os.Bundle) -> a
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> b
com.xconns.peerdevicenet.core.ConnHandler -> com.xconns.peerdevicenet.core.g:
    void onError(java.lang.String) -> a
    void onGetNetworks(com.xconns.peerdevicenet.NetInfo[]) -> a
    void onGetActiveNetwork(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> b
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> c
    void onNetworkActivated(com.xconns.peerdevicenet.NetInfo) -> d
    void onConnecting(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onConnectionFailed(com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void onConnected(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onDisconnected(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onSetConnectionInfo() -> b
    void onGetConnectionInfo(java.lang.String,boolean,int,int,int) -> a
    void onGetDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> c
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> a
com.xconns.peerdevicenet.core.Connection -> com.xconns.peerdevicenet.core.h:
    void close() -> a
    void accept() -> b
    void deny(int) -> a
    com.xconns.peerdevicenet.DeviceInfo getPeerDevice() -> c
    java.lang.String[] getPeerGroups() -> d
    void addPeerGroup(java.lang.String) -> a
    void delPeerGroup(java.lang.String) -> b
    int sendData(byte[]) -> a
com.xconns.peerdevicenet.core.ConnectionRecver -> com.xconns.peerdevicenet.core.i:
    void onRecvData(byte[],int,com.xconns.peerdevicenet.core.Connection) -> a
    void onConnecting(com.xconns.peerdevicenet.core.Connection,byte[]) -> a
    void onConnectionFailed(com.xconns.peerdevicenet.core.Connection,int) -> a
    void onConnected(com.xconns.peerdevicenet.core.Connection) -> a
    void onDisconnected(com.xconns.peerdevicenet.core.Connection) -> b
    void onError(java.lang.String) -> a
com.xconns.peerdevicenet.core.CoreAPI -> com.xconns.peerdevicenet.core.j:
    int getNextSessionId() -> a
    void getNetworks(int) -> a
    void getActiveNetwork(int) -> b
    void activateNetwork(int,com.xconns.peerdevicenet.NetInfo) -> a
    void startPeerSearch(int,com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void stopPeerSearch(int) -> c
    void connectPeer(int,com.xconns.peerdevicenet.DeviceInfo,byte[],int) -> a
    void disconnectPeer(int,com.xconns.peerdevicenet.DeviceInfo) -> a
    void acceptConnection(int,com.xconns.peerdevicenet.DeviceInfo) -> b
    void denyConnection(int,com.xconns.peerdevicenet.DeviceInfo,int) -> b
    void setConnectionInfo(int,java.lang.String,boolean,int,int,int) -> a
    void getConnectionInfo(int) -> d
    void getDeviceInfo(int) -> e
    void registerConnHandler(int,com.xconns.peerdevicenet.core.ConnHandler) -> a
    void unregisterConnHandler(int) -> f
    void joinGroup(java.lang.String,com.xconns.peerdevicenet.DeviceInfo[],com.xconns.peerdevicenet.core.GroupHandler) -> a
    void leaveGroup(java.lang.String) -> a
    void sendMsg(java.lang.String,com.xconns.peerdevicenet.DeviceInfo,android.os.Bundle) -> a
    void getConnectedPeers(java.lang.String,int) -> a
com.xconns.peerdevicenet.core.DiscoveryLeaderThread -> com.xconns.peerdevicenet.core.k:
    int BUFFER_SIZE -> a
    int scanTimeout -> b
    int connTimeout -> c
    com.xconns.peerdevicenet.core.RouterService context -> g
    com.xconns.peerdevicenet.NetInfo netInfo -> h
    java.lang.String myAddr -> i
    java.util.concurrent.ConcurrentHashMap foundDevices -> j
    java.util.concurrent.ConcurrentHashMap foundPeers -> k
    com.xconns.peerdevicenet.utils.PlainSocketFactory sockFactory -> l
    com.xconns.peerdevicenet.core.Transport$SearchHandler handler -> d
    java.net.ServerSocket serverSocket -> e
    java.net.Socket socket -> m
    java.util.concurrent.ScheduledFuture timerTask -> n
    boolean canceled -> f
    void close() -> a
    void closeFromInternal() -> b
    void start_scan(com.xconns.peerdevicenet.DeviceInfo,int,com.xconns.peerdevicenet.core.Transport$SearchHandler) -> a
    void stop_scan() -> c
    void foundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void broadcastDevToGM(com.xconns.peerdevicenet.DeviceInfo,boolean) -> b
    void run() -> run
    java.util.concurrent.ConcurrentHashMap access$0(com.xconns.peerdevicenet.core.DiscoveryLeaderThread) -> a
    java.util.concurrent.ConcurrentHashMap access$1(com.xconns.peerdevicenet.core.DiscoveryLeaderThread) -> b
    com.xconns.peerdevicenet.core.RouterService access$2(com.xconns.peerdevicenet.core.DiscoveryLeaderThread) -> c
com.xconns.peerdevicenet.core.DiscoveryLeaderThread$1 -> com.xconns.peerdevicenet.core.l:
    com.xconns.peerdevicenet.core.DiscoveryLeaderThread this$0 -> a
    void run() -> run
com.xconns.peerdevicenet.core.DiscoveryLeaderThread$2 -> com.xconns.peerdevicenet.core.m:
    com.xconns.peerdevicenet.core.DiscoveryLeaderThread this$0 -> a
    void run() -> run
com.xconns.peerdevicenet.core.DiscoveryLeaderThread$GMConnection -> com.xconns.peerdevicenet.core.n:
    com.xconns.peerdevicenet.core.DiscoveryLeaderThread scanner -> a
    com.xconns.peerdevicenet.DeviceInfo myDevInfo -> b
    java.net.Socket socket -> c
    java.util.concurrent.ScheduledFuture timerTask -> d
    java.io.DataOutputStream mOutputStream -> e
    java.io.DataInputStream mInputStream -> f
    boolean canceled -> g
    com.xconns.peerdevicenet.core.DiscoveryLeaderThread this$0 -> h
    void closeConn() -> a
    void sendDevInfo(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void run() -> run
com.xconns.peerdevicenet.core.DiscoveryLeaderThread$GMConnection$1 -> com.xconns.peerdevicenet.core.o:
    com.xconns.peerdevicenet.core.DiscoveryLeaderThread$GMConnection this$1 -> a
    void run() -> run
com.xconns.peerdevicenet.core.DiscoveryMemberThread -> com.xconns.peerdevicenet.core.p:
    int BUFFER_SIZE -> a
    int scanTimeout -> b
    int connTimeout -> c
    com.xconns.peerdevicenet.core.RouterService context -> d
    com.xconns.peerdevicenet.NetInfo netInfo -> f
    com.xconns.peerdevicenet.DeviceInfo mDeviceInfo -> g
    java.util.HashSet foundDevices -> h
    com.xconns.peerdevicenet.utils.PlainSocketFactory sockFactory -> i
    java.lang.String leaderAddr -> j
    com.xconns.peerdevicenet.core.Transport$SearchHandler handler -> e
    java.net.Socket socket -> k
    java.util.concurrent.ScheduledFuture timerTask -> l
    boolean canceled -> m
    void close() -> a
    void closeFromInternal() -> b
    void foundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void run() -> run
    java.net.Socket access$0(com.xconns.peerdevicenet.core.DiscoveryMemberThread) -> a
com.xconns.peerdevicenet.core.DiscoveryMemberThread$1 -> com.xconns.peerdevicenet.core.q:
    com.xconns.peerdevicenet.core.DiscoveryMemberThread this$0 -> a
    void run() -> run
com.xconns.peerdevicenet.core.DiscoveryMemberThread$2 -> com.xconns.peerdevicenet.core.r:
    com.xconns.peerdevicenet.core.DiscoveryMemberThread this$0 -> a
    void run() -> run
com.xconns.peerdevicenet.core.DiscoveryMulticastThread -> com.xconns.peerdevicenet.core.s:
    com.xconns.peerdevicenet.core.RouterService context -> a
    android.net.wifi.WifiManager wifi -> b
    com.xconns.peerdevicenet.core.Transport$SearchHandler handler -> c
    byte[] MCAST_GROUP_ADDR -> d
    int MCAST_GROUP_PORT -> e
    int BUFFER_SIZE -> f
    int timeout -> g
    java.util.concurrent.ScheduledFuture timerTask -> h
    boolean canceled -> i
    com.xconns.peerdevicenet.NetInfo netInfo -> j
    com.xconns.peerdevicenet.DeviceInfo mDeviceInfo -> k
    java.net.InetAddress groupAddress -> l
    java.net.MulticastSocket bSocket -> m
    com.xconns.peerdevicenet.core.DiscoveryMulticastThread$MyTimerTask scanTask -> n
    void stop_scan() -> a
    void run() -> run
    com.xconns.peerdevicenet.DeviceInfo access$0(com.xconns.peerdevicenet.core.DiscoveryMulticastThread) -> a
    java.net.InetAddress access$1(com.xconns.peerdevicenet.core.DiscoveryMulticastThread) -> b
    java.net.MulticastSocket access$2(com.xconns.peerdevicenet.core.DiscoveryMulticastThread) -> c
com.xconns.peerdevicenet.core.DiscoveryMulticastThread$MyTimerTask -> com.xconns.peerdevicenet.core.t:
    int count -> a
    int maxCount -> b
    byte[] addrInfo -> c
    com.xconns.peerdevicenet.core.DiscoveryMulticastThread this$0 -> d
    void run() -> run
com.xconns.peerdevicenet.core.GroupHandler -> com.xconns.peerdevicenet.core.u:
    void onError(java.lang.String) -> a
    void onSelfJoin(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onPeerJoin(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSelfLeave() -> a
    void onPeerLeave(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onReceive(com.xconns.peerdevicenet.DeviceInfo,android.os.Bundle) -> a
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> b
com.xconns.peerdevicenet.core.IntentingAPIPeer -> com.xconns.peerdevicenet.core.v:
    android.content.Context context -> b
    com.xconns.peerdevicenet.core.CoreAPI router -> c
    int sessionId -> d
    android.os.HandlerThread myThread -> e
    android.os.Looper mServiceLooper -> f
    com.xconns.peerdevicenet.core.IntentingAPIPeer$ServiceHandler mServiceHandler -> g
    com.xconns.peerdevicenet.core.ConnHandler mConnHandler -> a
    void stop() -> a
    void sendMsg(android.content.Intent) -> a
    android.content.Context access$0(com.xconns.peerdevicenet.core.IntentingAPIPeer) -> a
    com.xconns.peerdevicenet.core.CoreAPI access$1(com.xconns.peerdevicenet.core.IntentingAPIPeer) -> b
    int access$2(com.xconns.peerdevicenet.core.IntentingAPIPeer) -> c
com.xconns.peerdevicenet.core.IntentingAPIPeer$1 -> com.xconns.peerdevicenet.core.w:
    com.xconns.peerdevicenet.core.IntentingAPIPeer this$0 -> a
    void onError(java.lang.String) -> a
    void onConnected(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onDisconnected(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onGetDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> c
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onSearchStart(com.xconns.peerdevicenet.DeviceInfo) -> d
    void onSearchFoundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void onSearchComplete() -> a
    void onConnecting(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onConnectionFailed(com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void onGetNetworks(com.xconns.peerdevicenet.NetInfo[]) -> a
    void onGetActiveNetwork(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> b
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> c
    void onNetworkActivated(com.xconns.peerdevicenet.NetInfo) -> d
    void onSetConnectionInfo() -> b
    void onGetConnectionInfo(java.lang.String,boolean,int,int,int) -> a
com.xconns.peerdevicenet.core.IntentingAPIPeer$MyGroupHandler -> com.xconns.peerdevicenet.core.x:
    java.lang.String groupId -> a
    com.xconns.peerdevicenet.core.IntentingAPIPeer this$0 -> b
    void onError(java.lang.String) -> a
    void onSelfJoin(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onPeerJoin(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSelfLeave() -> a
    void onPeerLeave(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onReceive(com.xconns.peerdevicenet.DeviceInfo,android.os.Bundle) -> a
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> b
com.xconns.peerdevicenet.core.IntentingAPIPeer$ServiceHandler -> com.xconns.peerdevicenet.core.y:
    com.xconns.peerdevicenet.core.IntentingAPIPeer this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.xconns.peerdevicenet.core.MessengerAPIPeer -> com.xconns.peerdevicenet.core.z:
    com.xconns.peerdevicenet.core.CoreAPI router -> b
    android.os.Messenger mServerMessenger -> c
    android.os.Messenger mClientMessenger -> d
    int sessionId -> e
    android.os.HandlerThread myThread -> f
    android.os.Looper mServiceLooper -> g
    com.xconns.peerdevicenet.core.MessengerAPIPeer$ServiceHandler mServiceHandler -> h
    com.xconns.peerdevicenet.core.ConnHandler mConnHandler -> a
    void stop() -> a
    android.os.IBinder getBinder() -> b
    void recvMsg(android.os.Message) -> a
    com.xconns.peerdevicenet.core.CoreAPI access$0(com.xconns.peerdevicenet.core.MessengerAPIPeer) -> a
    int access$1(com.xconns.peerdevicenet.core.MessengerAPIPeer) -> b
    void access$2(com.xconns.peerdevicenet.core.MessengerAPIPeer,android.os.Messenger) -> a
com.xconns.peerdevicenet.core.MessengerAPIPeer$1 -> com.xconns.peerdevicenet.core.aa:
    com.xconns.peerdevicenet.core.MessengerAPIPeer this$0 -> a
    void onError(java.lang.String) -> a
    void onConnected(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onDisconnected(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onGetDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> c
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onSearchStart(com.xconns.peerdevicenet.DeviceInfo) -> d
    void onSearchFoundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void onSearchComplete() -> a
    void onConnecting(com.xconns.peerdevicenet.DeviceInfo,byte[]) -> a
    void onConnectionFailed(com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void onGetNetworks(com.xconns.peerdevicenet.NetInfo[]) -> a
    void onGetActiveNetwork(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> b
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> c
    void onNetworkActivated(com.xconns.peerdevicenet.NetInfo) -> d
    void onSetConnectionInfo() -> b
    void onGetConnectionInfo(java.lang.String,boolean,int,int,int) -> a
com.xconns.peerdevicenet.core.MessengerAPIPeer$MyGroupHandler -> com.xconns.peerdevicenet.core.ab:
    java.lang.String groupId -> a
    com.xconns.peerdevicenet.core.MessengerAPIPeer this$0 -> b
    void onError(java.lang.String) -> a
    void onSelfJoin(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    void onPeerJoin(com.xconns.peerdevicenet.DeviceInfo) -> a
    void onSelfLeave() -> a
    void onPeerLeave(com.xconns.peerdevicenet.DeviceInfo) -> b
    void onReceive(com.xconns.peerdevicenet.DeviceInfo,android.os.Bundle) -> a
    void onGetPeerDevices(com.xconns.peerdevicenet.DeviceInfo[]) -> b
com.xconns.peerdevicenet.core.MessengerAPIPeer$ServiceHandler -> com.xconns.peerdevicenet.core.ac:
    com.xconns.peerdevicenet.core.MessengerAPIPeer this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.xconns.peerdevicenet.core.RouterService -> com.xconns.peerdevicenet.core.RouterService:
    com.xconns.peerdevicenet.core.AidlConnAPIPeer idlConnPeer -> v
    com.xconns.peerdevicenet.core.AidlGroupAPIPeer idlGroupPeer -> w
    com.xconns.peerdevicenet.core.IntentingAPIPeer mIntentingAPIPeer -> x
    com.xconns.peerdevicenet.core.MessengerAPIPeer messengerPeer -> y
    android.content.SharedPreferences settings -> a
    int connLivenessTimeout -> b
    int connTimeout -> c
    int searchTimeout -> d
    boolean useSSL -> e
    com.xconns.peerdevicenet.DeviceInfo mMyDeviceInfo -> f
    android.net.wifi.WifiManager$WifiLock myWifiLock -> g
    boolean useIntWifi -> h
    com.xconns.peerdevicenet.core.TransportManager linkMgr -> i
    int actNetType -> j
    com.xconns.peerdevicenet.core.TCPConnector mTCPConn -> k
    boolean scanStarted -> l
    java.util.concurrent.ConcurrentHashMap mRemoteConnTable -> m
    java.util.concurrent.ConcurrentHashMap mGroupConnTable -> n
    java.util.concurrent.ConcurrentHashMap mLocalGroupTable -> o
    java.util.concurrent.ConcurrentHashMap mConnHandlerTable -> p
    java.util.concurrent.ScheduledThreadPoolExecutor timer -> q
    com.xconns.peerdevicenet.core.Transport$Handler linkHandler -> r
    com.xconns.peerdevicenet.core.ConnectionRecver mConnRecver -> s
    int sessionId -> t
    java.lang.Object sessionLock -> u
    void onCreate() -> onCreate
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
    boolean startUpActions(java.lang.String) -> b
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    void resetRouter() -> b
    java.lang.String getLocalGroupInfo() -> c
    int getConnMonitorTimeout() -> d
    void restartTCPConnector(java.lang.String) -> c
    void startPeerSearch(int,com.xconns.peerdevicenet.DeviceInfo,int) -> a
    void stopPeerSearch(int) -> c
    void connectPeer(int,com.xconns.peerdevicenet.DeviceInfo,byte[],int) -> a
    void disconnectPeer(int,com.xconns.peerdevicenet.DeviceInfo) -> a
    void acceptConnection(int,com.xconns.peerdevicenet.DeviceInfo) -> b
    void denyConnection(int,com.xconns.peerdevicenet.DeviceInfo,int) -> b
    void joinGroup(java.lang.String,com.xconns.peerdevicenet.DeviceInfo[],com.xconns.peerdevicenet.core.GroupHandler) -> a
    void leaveGroup(java.lang.String) -> a
    void sendMsg(java.lang.String,com.xconns.peerdevicenet.DeviceInfo,android.os.Bundle) -> a
    void checkNetTypeFromGO(int) -> g
    void setConnectionInfo(int,java.lang.String,boolean,int,int,int) -> a
    void getConnectionInfo(int) -> d
    void getDeviceInfo(int) -> e
    void getConnectedPeers(java.lang.String,int) -> a
    void registerConnHandler(int,com.xconns.peerdevicenet.core.ConnHandler) -> a
    void unregisterConnHandler(int) -> f
    void getNetworks(int) -> a
    void getActiveNetwork(int) -> b
    void activateNetwork(int,com.xconns.peerdevicenet.NetInfo) -> a
    void onDeviceDisconnected(com.xconns.peerdevicenet.core.Connection) -> a
    int getNextSessionId() -> a
com.xconns.peerdevicenet.core.RouterService$1 -> com.xconns.peerdevicenet.core.ad:
    com.xconns.peerdevicenet.core.RouterService this$0 -> a
    void onError(int,java.lang.String) -> a
    void onTransportEnabled(int,boolean) -> a
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> b
com.xconns.peerdevicenet.core.RouterService$2 -> com.xconns.peerdevicenet.core.ae:
    com.xconns.peerdevicenet.core.RouterService this$0 -> a
    void onRecvData(byte[],int,com.xconns.peerdevicenet.core.Connection) -> a
    void onConnecting(com.xconns.peerdevicenet.core.Connection,byte[]) -> a
    void onConnectionFailed(com.xconns.peerdevicenet.core.Connection,int) -> a
    void onConnected(com.xconns.peerdevicenet.core.Connection) -> a
    void onDisconnected(com.xconns.peerdevicenet.core.Connection) -> b
    void onError(java.lang.String) -> a
com.xconns.peerdevicenet.core.TCPConnection -> com.xconns.peerdevicenet.core.af:
    boolean mAccepted -> a
    boolean mAcceptConfirmed -> b
    java.lang.Object mAcceptLock -> c
    byte[] mToken -> d
    int rejectCode -> e
    com.xconns.peerdevicenet.DeviceInfo mPeerDeviceInfo -> f
    com.xconns.peerdevicenet.DeviceInfo mMyDeviceInfo -> g
    java.util.List mPeerGroups -> h
    java.lang.String mMyGroupInfo -> i
    java.io.DataOutputStream mOutputStream -> j
    java.io.DataInputStream mInputStream -> k
    java.net.Socket sock -> l
    int connLivenessTimeout -> m
    long lastRecvTime -> n
    int unanswered_hb -> o
    java.util.Timer timer -> r
    java.lang.Object connMonLock -> p
    com.xconns.peerdevicenet.core.ConnectionRecver recver -> q
    com.xconns.peerdevicenet.core.TCPConnection$ConnMonTask connMonTask -> s
    com.xconns.peerdevicenet.DeviceInfo getPeerDevice() -> c
    void accept() -> b
    void deny(int) -> a
    java.lang.String[] getPeerGroups() -> d
    void addPeerGroup(java.lang.String) -> a
    void delPeerGroup(java.lang.String) -> b
    void sendHeartbeat(long,int) -> a
    void close() -> a
    int sendData(byte[]) -> a
    void run() -> run
com.xconns.peerdevicenet.core.TCPConnection$1 -> com.xconns.peerdevicenet.core.ag:
    com.xconns.peerdevicenet.core.TCPConnection this$0 -> a
    void run() -> run
com.xconns.peerdevicenet.core.TCPConnection$ConnMonTask -> com.xconns.peerdevicenet.core.ah:
    com.xconns.peerdevicenet.core.TCPConnection this$0 -> a
    void run() -> run
com.xconns.peerdevicenet.core.TCPConnector -> com.xconns.peerdevicenet.core.ai:
    com.xconns.peerdevicenet.utils.SocketFactory sockFactory -> a
    com.xconns.peerdevicenet.core.RouterService mService -> b
    com.xconns.peerdevicenet.core.TCPConnector$AcceptThread mAcceptThread -> c
    void start() -> a
    void restart() -> b
    void stop() -> c
    int getServicePort() -> d
    int getConnMonTime() -> e
    void connect(com.xconns.peerdevicenet.DeviceInfo,byte[],int) -> a
    com.xconns.peerdevicenet.core.RouterService access$0(com.xconns.peerdevicenet.core.TCPConnector) -> a
    com.xconns.peerdevicenet.core.TCPConnector$AcceptThread access$1(com.xconns.peerdevicenet.core.TCPConnector) -> b
    void access$2(com.xconns.peerdevicenet.core.TCPConnector,com.xconns.peerdevicenet.core.TCPConnector$AcceptThread) -> a
com.xconns.peerdevicenet.core.TCPConnector$1 -> com.xconns.peerdevicenet.core.aj:
    com.xconns.peerdevicenet.core.TCPConnector this$0 -> a
    void run() -> run
com.xconns.peerdevicenet.core.TCPConnector$AcceptThread -> com.xconns.peerdevicenet.core.ak:
    java.net.ServerSocket serverSocket -> b
    boolean canceled -> c
    com.xconns.peerdevicenet.core.TCPConnector this$0 -> a
    int getServicePort() -> a
    void run() -> run
    void cancel() -> b
com.xconns.peerdevicenet.core.Transport -> com.xconns.peerdevicenet.core.al:
    void onCreate(com.xconns.peerdevicenet.core.Transport$Handler) -> a
    void onDestroy() -> a
    void onPause() -> b
    void onResume() -> c
    com.xconns.peerdevicenet.NetInfo getNetworkInfo() -> d
    void startSearch(com.xconns.peerdevicenet.DeviceInfo,com.xconns.peerdevicenet.DeviceInfo,int,com.xconns.peerdevicenet.core.Transport$SearchHandler) -> a
    void stopSearch() -> e
com.xconns.peerdevicenet.core.Transport$Handler -> com.xconns.peerdevicenet.core.am:
    void onError(int,java.lang.String) -> a
    void onTransportEnabled(int,boolean) -> a
    void onNetworkConnected(com.xconns.peerdevicenet.NetInfo) -> a
    void onNetworkDisconnected(com.xconns.peerdevicenet.NetInfo) -> b
com.xconns.peerdevicenet.core.Transport$SearchHandler -> com.xconns.peerdevicenet.core.an:
    void onSearchStart(com.xconns.peerdevicenet.DeviceInfo) -> d
    void onSearchFoundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void onSearchComplete() -> a
    void onError(java.lang.String) -> a
com.xconns.peerdevicenet.core.TransportManager -> com.xconns.peerdevicenet.core.ao:
    com.xconns.peerdevicenet.core.Transport actLink -> a
    com.xconns.peerdevicenet.core.Transport[] links -> b
    com.xconns.peerdevicenet.core.RouterService context -> c
    java.util.Timer checkTimer -> d
    void onDestroy() -> a
    void onResume() -> b
    void onPause() -> c
    com.xconns.peerdevicenet.NetInfo setActiveNetwork(int) -> a
    com.xconns.peerdevicenet.NetInfo[] getAllNetworks() -> d
    com.xconns.peerdevicenet.NetInfo getActiveNetwork() -> e
    boolean isSupported(int) -> b
    void startSearch(com.xconns.peerdevicenet.DeviceInfo,com.xconns.peerdevicenet.DeviceInfo,int,com.xconns.peerdevicenet.core.Transport$SearchHandler) -> a
    void stopSearch() -> f
com.xconns.peerdevicenet.core.WiFiDirectBroadcastReceiver -> com.xconns.peerdevicenet.core.ap:
    android.net.wifi.p2p.WifiP2pManager manager -> a
    android.net.wifi.p2p.WifiP2pManager$Channel channel -> b
    com.xconns.peerdevicenet.core.WifiDirectTransport wifiDirect -> c
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.xconns.peerdevicenet.core.WiFiDirectGroupManagerReceiver -> com.xconns.peerdevicenet.core.aq:
    com.xconns.peerdevicenet.core.WifiDirectGroupManager groupManager -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.xconns.peerdevicenet.core.WifiApManager -> com.xconns.peerdevicenet.core.ar:
    android.net.wifi.WifiManager mWifiManager -> a
    int getWifiApState(int) -> a
    android.net.wifi.WifiConfiguration getWifiApConfiguration() -> a
com.xconns.peerdevicenet.core.WifiDirectGroupManager -> com.xconns.peerdevicenet.core.as:
    com.xconns.peerdevicenet.core.WifiDirectGroupManager$Handler handler -> a
    android.net.wifi.p2p.WifiP2pManager manager -> b
    android.net.wifi.p2p.WifiP2pManager$Channel channel -> c
    android.content.BroadcastReceiver receiver -> d
    android.content.IntentFilter intentFilter -> e
    android.net.wifi.p2p.WifiP2pGroup groupInfo -> f
    boolean isWifiDirectEnabled -> g
    boolean retryChannel -> h
    android.content.Context context -> i
    void onResume() -> a
    void onPause() -> b
    void onDestroy() -> c
    void reset() -> d
    void onEnabledStatus(boolean) -> a
    void createNetwork() -> e
    void removeNetwork() -> f
    void onChannelDisconnected() -> onChannelDisconnected
com.xconns.peerdevicenet.core.WifiDirectGroupManager$1 -> com.xconns.peerdevicenet.core.at:
    com.xconns.peerdevicenet.core.WifiDirectGroupManager this$0 -> a
    void onFailure(int) -> onFailure
    void onSuccess() -> onSuccess
com.xconns.peerdevicenet.core.WifiDirectGroupManager$2 -> com.xconns.peerdevicenet.core.au:
    com.xconns.peerdevicenet.core.WifiDirectGroupManager this$0 -> a
    void onFailure(int) -> onFailure
    void onSuccess() -> onSuccess
com.xconns.peerdevicenet.core.WifiDirectGroupManager$Handler -> com.xconns.peerdevicenet.core.av:
    void onError(java.lang.String) -> a
    void onWifiDirectNotEnabled() -> a
com.xconns.peerdevicenet.core.WifiDirectTransport -> com.xconns.peerdevicenet.core.aw:
    android.net.wifi.p2p.WifiP2pManager manager -> a
    android.net.wifi.p2p.WifiP2pManager$Channel channel -> b
    android.content.BroadcastReceiver receiver -> c
    android.content.IntentFilter intentFilter -> d
    android.net.wifi.p2p.WifiP2pInfo connInfo -> e
    android.net.wifi.p2p.WifiP2pGroup groupInfo -> f
    com.xconns.peerdevicenet.NetInfo netInfo -> g
    com.xconns.peerdevicenet.utils.Utils$IntfAddr intfAddr -> h
    boolean isWifiDirectEnabled -> i
    boolean retryChannel -> j
    com.xconns.peerdevicenet.core.DiscoveryLeaderThread scannerGO -> k
    com.xconns.peerdevicenet.core.DiscoveryMemberThread scannerGM -> l
    com.xconns.peerdevicenet.core.RouterService context -> m
    com.xconns.peerdevicenet.core.Transport$Handler handler -> n
    android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener connInfoHandler -> o
    android.net.wifi.p2p.WifiP2pManager$GroupInfoListener grpInfoHandler -> p
    void onCreate(com.xconns.peerdevicenet.core.Transport$Handler) -> a
    void onResume() -> c
    void onPause() -> b
    void onDestroy() -> a
    void reset(boolean) -> a
    com.xconns.peerdevicenet.NetInfo getNetworkInfo() -> d
    void startSearch(com.xconns.peerdevicenet.DeviceInfo,com.xconns.peerdevicenet.DeviceInfo,int,com.xconns.peerdevicenet.core.Transport$SearchHandler) -> a
    void stopSearch() -> e
    void onEnabledStatus(boolean) -> b
    void onChannelDisconnected() -> onChannelDisconnected
com.xconns.peerdevicenet.core.WifiDirectTransport$1 -> com.xconns.peerdevicenet.core.ax:
    com.xconns.peerdevicenet.core.WifiDirectTransport this$0 -> a
    void onConnectionInfoAvailable(android.net.wifi.p2p.WifiP2pInfo) -> onConnectionInfoAvailable
com.xconns.peerdevicenet.core.WifiDirectTransport$2 -> com.xconns.peerdevicenet.core.ay:
    com.xconns.peerdevicenet.core.WifiDirectTransport this$0 -> a
    void onGroupInfoAvailable(android.net.wifi.p2p.WifiP2pGroup) -> onGroupInfoAvailable
com.xconns.peerdevicenet.core.WifiHotspotTransport -> com.xconns.peerdevicenet.core.az:
    android.net.wifi.WifiManager mWifiManager -> a
    com.xconns.peerdevicenet.core.WifiApManager wifiApMgr -> b
    android.net.wifi.WifiConfiguration wc -> c
    com.xconns.peerdevicenet.core.RouterService routerService -> d
    com.xconns.peerdevicenet.core.Transport$Handler handler -> e
    android.content.IntentFilter intentFilter -> f
    boolean isWifiHotspotEnabled -> g
    com.xconns.peerdevicenet.core.DiscoveryLeaderThread scannerGO -> h
    com.xconns.peerdevicenet.NetInfo netInfo -> i
    com.xconns.peerdevicenet.utils.Utils$IntfAddr intfAddr -> j
    java.lang.String hotspotPrefix -> k
    java.util.concurrent.ScheduledFuture timerTask -> l
    android.content.BroadcastReceiver myWifiRecver -> m
    void onCreate(com.xconns.peerdevicenet.core.Transport$Handler) -> a
    void onDestroy() -> a
    void onPause() -> b
    void onResume() -> c
    com.xconns.peerdevicenet.NetInfo getNetworkInfo() -> d
    void startSearch(com.xconns.peerdevicenet.DeviceInfo,com.xconns.peerdevicenet.DeviceInfo,int,com.xconns.peerdevicenet.core.Transport$SearchHandler) -> a
    void stopSearch() -> e
    void reset(boolean) -> a
    void updateNetworkSettings(android.net.wifi.WifiConfiguration,com.xconns.peerdevicenet.utils.Utils$IntfAddr) -> a
    void access$0(com.xconns.peerdevicenet.core.WifiHotspotTransport,java.util.concurrent.ScheduledFuture) -> a
com.xconns.peerdevicenet.core.WifiHotspotTransport$1 -> com.xconns.peerdevicenet.core.ba:
    com.xconns.peerdevicenet.core.WifiHotspotTransport this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.xconns.peerdevicenet.core.WifiHotspotTransport$MyTimerCB -> com.xconns.peerdevicenet.core.bb:
    com.xconns.peerdevicenet.core.WifiHotspotTransport this$0 -> a
    void run() -> run
com.xconns.peerdevicenet.core.WifiTransport -> com.xconns.peerdevicenet.core.bc:
    com.xconns.peerdevicenet.core.RouterService routerService -> a
    com.xconns.peerdevicenet.core.Transport$Handler handler -> b
    android.content.IntentFilter intentFilter -> c
    android.net.ConnectivityManager cm -> d
    android.net.wifi.WifiManager mWifiManager -> e
    boolean isWifiEnabled -> f
    com.xconns.peerdevicenet.core.DiscoveryMulticastThread mScanThread -> g
    com.xconns.peerdevicenet.core.DiscoveryMemberThread scannerGM -> h
    com.xconns.peerdevicenet.core.DiscoveryLeaderThread scannerGO -> i
    com.xconns.peerdevicenet.NetInfo netInfo -> j
    com.xconns.peerdevicenet.utils.Utils$IntfAddr intfAddr -> k
    android.content.BroadcastReceiver myWifiRecver -> l
    void onCreate(com.xconns.peerdevicenet.core.Transport$Handler) -> a
    void onDestroy() -> a
    void onPause() -> b
    void onResume() -> c
    com.xconns.peerdevicenet.NetInfo getNetworkInfo() -> d
    java.lang.String getHotspotAddr(java.lang.String) -> a
    void startSearch(com.xconns.peerdevicenet.DeviceInfo,com.xconns.peerdevicenet.DeviceInfo,int,com.xconns.peerdevicenet.core.Transport$SearchHandler) -> a
    void stopSearch() -> e
    void reset(boolean) -> a
    void updateNetworkSettings() -> f
com.xconns.peerdevicenet.core.WifiTransport$1 -> com.xconns.peerdevicenet.core.bd:
    com.xconns.peerdevicenet.core.WifiTransport this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.xconns.peerdevicenet.core.WifiTransport$ComboHandler -> com.xconns.peerdevicenet.core.be:
    com.xconns.peerdevicenet.core.Transport$SearchHandler h -> a
    int count -> b
    com.xconns.peerdevicenet.core.WifiTransport this$0 -> c
    void onSearchStart(com.xconns.peerdevicenet.DeviceInfo) -> d
    void onSearchFoundDevice(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    void onSearchComplete() -> a
    void onError(java.lang.String) -> a
com.xconns.peerdevicenet.ctor.ConnectorActivity -> com.xconns.peerdevicenet.ctor.ConnectorActivity:
    android.widget.LinearLayout groupRole -> a
    android.widget.RadioGroup mQRConn -> b
    android.widget.RadioGroup mAutoConn -> c
    boolean isLeader -> d
    android.content.SharedPreferences settings -> e
    android.widget.LinearLayout groupNType -> f
    android.widget.CheckBox useSSLBox -> g
    boolean useSSL -> h
    android.widget.RadioGroup mTypes -> i
    android.widget.RadioButton wifiBtn -> j
    android.widget.RadioButton wifiDirectBtn -> k
    android.widget.RadioButton wifiHotspotBtn -> l
    int chosenNType -> m
    android.widget.TextView wifiInfo -> n
    android.widget.TextView wifiDirectInfo -> o
    android.widget.TextView wifiHotspotInfo -> p
    android.widget.TextView hotspotLockedInfo -> q
    java.lang.CharSequence wifiInfoText -> r
    java.lang.CharSequence wifiDirectInfoText -> s
    java.lang.CharSequence wifiHotspotInfoText -> t
    java.lang.CharSequence checkSetting -> u
    android.widget.LinearLayout groupPasswd -> v
    android.widget.EditText passwdText -> w
    android.widget.TextView enterBtn -> x
    android.widget.LinearLayout groupQRCode -> y
    android.widget.ImageView qrCodeView -> z
    com.xconns.peerdevicenet.ctor.QRCodeData qrData -> A
    android.widget.LinearLayout groupProg -> B
    android.widget.LinearLayout groupClose -> C
    android.widget.TextView dismissBtn -> D
    boolean Closed -> E
    boolean wifiDirectSupported -> F
    com.xconns.peerdevicenet.core.WifiDirectGroupManager grpMgr -> G
    com.xconns.peerdevicenet.cm.ConnectionManagerService connMgrService -> H
    boolean mInited -> I
    com.xconns.peerdevicenet.NetInfo[] connNets -> J
    int actNetType -> K
    java.lang.String devName -> L
    java.util.Timer timer -> M
    android.content.ServiceConnection mConnection -> O
    android.os.Handler mHandler -> N
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onPause() -> onPause
    void onResume() -> onResume
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void getPeerDeviceNetInfo() -> a
    void initGroupRole() -> b
    void initGroupNType() -> c
    void initGroupQRCode() -> d
    void initGroupClose() -> e
    void initGroupProg() -> f
    void doLeader() -> g
    void doMember() -> h
    void doWifi() -> i
    void doWifiDirect() -> j
    void doWifiHotspot() -> k
    void resetChosenNType() -> l
    void resumeLeader() -> m
    void showGroup(int) -> a
    void configWifi() -> n
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void setupWifiConn(com.xconns.peerdevicenet.ctor.QRCodeData) -> a
    void setUseSSL(boolean) -> a
    void netConnectedAtLeader(com.xconns.peerdevicenet.NetInfo[]) -> a
    void netDisconnectedAtLeader(com.xconns.peerdevicenet.NetInfo) -> a
    void netActivatedAtLeader(com.xconns.peerdevicenet.NetInfo) -> b
    android.app.Dialog onCreateDialog(int) -> onCreateDialog
com.xconns.peerdevicenet.ctor.ConnectorActivity$1 -> com.xconns.peerdevicenet.ctor.a:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.xconns.peerdevicenet.ctor.ConnectorActivity$10 -> com.xconns.peerdevicenet.ctor.b:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.ctor.ConnectorActivity$11 -> com.xconns.peerdevicenet.ctor.c:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.ctor.ConnectorActivity$12 -> com.xconns.peerdevicenet.ctor.d:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
com.xconns.peerdevicenet.ctor.ConnectorActivity$2 -> com.xconns.peerdevicenet.ctor.e:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.xconns.peerdevicenet.ctor.ConnectorActivity$3 -> com.xconns.peerdevicenet.ctor.f:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void onError(java.lang.String) -> a
    void onWifiDirectNotEnabled() -> a
com.xconns.peerdevicenet.ctor.ConnectorActivity$4 -> com.xconns.peerdevicenet.ctor.g:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
com.xconns.peerdevicenet.ctor.ConnectorActivity$5 -> com.xconns.peerdevicenet.ctor.h:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
com.xconns.peerdevicenet.ctor.ConnectorActivity$6 -> com.xconns.peerdevicenet.ctor.i:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.xconns.peerdevicenet.ctor.ConnectorActivity$7 -> com.xconns.peerdevicenet.ctor.j:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
com.xconns.peerdevicenet.ctor.ConnectorActivity$8 -> com.xconns.peerdevicenet.ctor.k:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.xconns.peerdevicenet.ctor.ConnectorActivity$9 -> com.xconns.peerdevicenet.ctor.l:
    com.xconns.peerdevicenet.ctor.ConnectorActivity this$0 -> a
    void onClick(android.view.View) -> onClick
com.xconns.peerdevicenet.ctor.QRCodeData -> com.xconns.peerdevicenet.ctor.m:
    java.lang.String ssid -> a
    java.lang.String passwd -> b
    int encrypt -> c
    boolean hidden -> d
    boolean useSSL -> e
    java.lang.String addr -> f
    java.lang.String toString() -> toString
    java.lang.String encode() -> a
    com.xconns.peerdevicenet.ctor.QRCodeData decode(java.lang.String) -> a
com.xconns.peerdevicenet.ctor.QRCodeEncoder -> com.xconns.peerdevicenet.ctor.n:
    android.graphics.Bitmap encodeAsBitmap(java.lang.String,int) -> a
    java.lang.String guessAppropriateEncoding(java.lang.CharSequence) -> a
com.xconns.peerdevicenet.ctor.WifiConnector -> com.xconns.peerdevicenet.ctor.o:
    java.lang.String TAG -> b
    java.util.regex.Pattern HEX_DIGITS -> c
    android.net.wifi.WifiManager wifiManager -> d
    com.xconns.peerdevicenet.ctor.ConnectorActivity ctor -> a
    java.lang.Boolean doInBackground(com.xconns.peerdevicenet.ctor.QRCodeData[]) -> a
    void onPostExecute(java.lang.Boolean) -> a
    void updateNetwork(android.net.wifi.WifiManager,android.net.wifi.WifiConfiguration) -> a
    android.net.wifi.WifiConfiguration changeNetworkCommon(com.xconns.peerdevicenet.ctor.QRCodeData) -> a
    void changeNetworkWEP(android.net.wifi.WifiManager,com.xconns.peerdevicenet.ctor.QRCodeData) -> a
    void changeNetworkWPA(android.net.wifi.WifiManager,com.xconns.peerdevicenet.ctor.QRCodeData) -> b
    void changeNetworkUnEncrypted(android.net.wifi.WifiManager,com.xconns.peerdevicenet.ctor.QRCodeData) -> c
    java.lang.Integer findNetworkInExistingConfig(android.net.wifi.WifiManager,java.lang.String) -> a
    java.lang.String quoteNonHex(java.lang.String,int[]) -> a
    java.lang.String convertToQuotedString(java.lang.String) -> a
    boolean isHexOfLength(java.lang.CharSequence,int[]) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.xconns.peerdevicenet.utils.PlainSocketFactory -> com.xconns.peerdevicenet.a.a:
    com.xconns.peerdevicenet.utils.PlainSocketFactory instance -> a
    java.lang.Object lock -> b
    com.xconns.peerdevicenet.utils.PlainSocketFactory getInstance(android.content.Context) -> a
    java.net.ServerSocket newServerSocket() -> a
    java.net.Socket newClientSocket() -> b
com.xconns.peerdevicenet.utils.SecureSocketFactory -> com.xconns.peerdevicenet.a.b:
    com.xconns.peerdevicenet.utils.SecureSocketFactory instance -> d
    java.lang.Object lock -> e
    android.content.Context context -> f
    javax.net.ssl.SSLContext sslContext -> a
    javax.net.ssl.TrustManagerFactory trustManagerFactory -> b
    javax.net.ssl.KeyManagerFactory keyManagerFactory -> c
    com.xconns.peerdevicenet.utils.SecureSocketFactory getInstance(android.content.Context) -> a
    void initSSLContext() -> e
    javax.net.ssl.SSLServerSocket newServerSocket() -> c
    javax.net.ssl.SSLSocket newClientSocket() -> d
    java.net.ServerSocket newServerSocket() -> a
    java.net.Socket newClientSocket() -> b
com.xconns.peerdevicenet.utils.SocketFactory -> com.xconns.peerdevicenet.a.c:
    java.net.ServerSocket newServerSocket() -> a
    java.net.Socket newClientSocket() -> b
com.xconns.peerdevicenet.utils.Utils -> com.xconns.peerdevicenet.a.d:
    int ANDROID_VERSION -> a
    java.lang.String[] audioDirs -> b
    java.lang.String[] downloadDirs -> c
    com.xconns.peerdevicenet.utils.Utils$IntfAddr getIntfAddrByType(int) -> a
    com.xconns.peerdevicenet.utils.Utils$IntfAddr getIntfAddrByAddr(java.lang.String) -> a
    com.xconns.peerdevicenet.utils.Utils$IntfAddr getFirstPrivateIntfAddr(int) -> b
    com.xconns.peerdevicenet.utils.Utils$IntfAddr getFirstIntfAddrWithPrefix(java.lang.String) -> b
    com.xconns.peerdevicenet.utils.Utils$IntfAddr getFirstPrivateIntfAddrWithPrefix(java.lang.String) -> c
    com.xconns.peerdevicenet.utils.Utils$IntfAddr getFirstWifiHotspotIntfAddr() -> a
    com.xconns.peerdevicenet.utils.Utils$IntfAddr getFirstWifiDirectIntfAddr() -> b
    java.lang.String getIpString(int) -> c
    android.os.Bundle net2Bundle(com.xconns.peerdevicenet.NetInfo) -> a
    android.os.Bundle netArray2Bundle(com.xconns.peerdevicenet.NetInfo[]) -> a
    android.os.Bundle device2Bundle(com.xconns.peerdevicenet.DeviceInfo) -> a
    android.os.Bundle deviceArray2Bundle(com.xconns.peerdevicenet.DeviceInfo[]) -> a
    byte[] marshallDeviceInfo(com.xconns.peerdevicenet.DeviceInfo) -> b
    com.xconns.peerdevicenet.DeviceInfo unmarshallDeviceInfo(byte[],int) -> a
    byte[] marshallDeviceInfoSSL(com.xconns.peerdevicenet.DeviceInfo,boolean) -> a
    android.util.Pair unmarshallDeviceInfoSSL(byte[],int) -> b
    byte[] marshallBundle(android.os.Bundle) -> a
    android.os.Bundle unmarshallBundle(byte[],int) -> c
com.xconns.peerdevicenet.utils.Utils$IntfAddr -> com.xconns.peerdevicenet.a.e:
    java.lang.String intfName -> a
    java.lang.String addr -> b
    boolean mcast -> c
    java.lang.String toString() -> toString
